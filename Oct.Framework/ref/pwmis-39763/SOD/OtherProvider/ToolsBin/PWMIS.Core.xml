<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PWMIS.Core</name>
    </assembly>
    <members>
        <member name="T:PWMIS.DataForms.Adapter.IBCommand">
            <summary>
            智能窗体命令对象，使用该对前必须确保对应的数据表有主建和插入时候的自增列
            </summary>
        </member>
        <member name="M:PWMIS.DataForms.Adapter.IBCommand.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataForms.Adapter.IBCommand.#ctor(System.String)">
            <summary>
            指定一个数据表初始化该类
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="P:PWMIS.DataForms.Adapter.IBCommand.InsertCommand">
            <summary>
            插入数据命令
            </summary>
        </member>
        <member name="P:PWMIS.DataForms.Adapter.IBCommand.UpdateCommand">
            <summary>
            更新数据命令
            </summary>
        </member>
        <member name="P:PWMIS.DataForms.Adapter.IBCommand.SelectCommand">
            <summary>
            选择数据命令
            </summary>
        </member>
        <member name="P:PWMIS.DataForms.Adapter.IBCommand.DeleteCommand">
            <summary>
            删除数据命令
            </summary>
        </member>
        <member name="P:PWMIS.DataForms.Adapter.IBCommand.TableName">
            <summary>
            表名称
            </summary>
        </member>
        <member name="P:PWMIS.DataForms.Adapter.IBCommand.InsertedID">
            <summary>
            插入标识，用于数据库的自增列，等于0表示还未插入，大鱼0表示已经插入过数据自增标识值，等于-2表示非数字类型的主键。
            </summary>
        </member>
        <member name="P:PWMIS.DataForms.Adapter.IBCommand.GuidPrimaryKey">
            <summary>
            GUID 主键名称
            </summary>
        </member>
        <member name="P:PWMIS.DataForms.Adapter.IBCommand.Parameters">
            <summary>
            对应的查询参数数组
            </summary>
        </member>
        <member name="T:PWMIS.DataForms.Adapter.UseDataControl">
            <summary>
            用户使用数据控件的自定义方法委托
            </summary>
            <param name="dataControl"></param>
        </member>
        <member name="T:PWMIS.DataForms.Adapter.MyDataForm">
            <summary>
            我的数据窗体，是Web/WinForm 数据窗体抽象类
            </summary>
        </member>
        <member name="M:PWMIS.DataForms.Adapter.MyDataForm.GetSelectAndDeleteCommand(System.Collections.Generic.List{PWMIS.Common.IDataControl})">
            <summary>
            获取选择和删除查询的SQL语句
            </summary>
            <param name="IBControls">已经收集的控件集合</param>
            <returns> ArrayList 中的成员为 IBCommand 对象，包含具体的CRUD SQL</returns>
        </member>
        <member name="P:PWMIS.DataForms.Adapter.MyDataForm.CheckAffectRowCount">
            <summary>
            是否检查更新结果所影响的行数，如果检查，那么受影响的行不大于0将抛出错误。
            </summary>
        </member>
        <member name="P:PWMIS.DataForms.Adapter.MyDataForm.DAO">
            <summary>
            获取或者设置数据访问对象，默认使用静态 CommonDB 类的实例对象，
            如果使用事务并且有并发访问，请设置 CommonDB 的动态实例，例如：MyDB.GetDBHelper();
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Adapter.MyDB">
            <summary>
            应用程序数据访问实例，提供单例模式和工厂模式创建实例对象，根据应用程序配置文件自动创建特定的数据访问对象。
            2008.5.23 增加动态数据集更新功能,7.24增加线程安全的静态实例。
            2009.4.1  增加SQLite 数据库支持。
            2010.1.6  增加 connectionStrings 配置支持
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetDBHelper">
            <summary>
            通过配置文件获得数据访问对象实例，
            请在应用程序配置文件中创建 EngineType 键，值为[DB]，同时需要创建 [DB]HelperAssembly，[DB]HelperType ，[DB]ConnectionString 键，[DB]值为SQLSERVER/OLEDB/ODBC/ORACLE 之一
            如果未指定 EngineType 键，则使用 connectionStrings 配置节的第一个连接配置信息，必须指明 providerName，可以使用下面的形式：
            providerName="PWMIS.DataProvider.Data.SqlServer,PWMIS.Core"
            也可以直接使用 下面的形式：
            providerName="SqlServer" ，当然，这种形式的提供程序程序集默认就是 PWMIS.CommonDataProvider.Data 。
            如果有多个，默认取最后一个 providerName
            </summary>
            <returns>数据访问对象实例</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetDBHelperByConnectionName(System.String)">
            <summary>
            从 connectionStrings 配置节获取指定 数据连接名称的数据访问对象实例
            </summary>
            <param name="name">数据连接名称</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetDBHelperByProviderString(System.String,System.String)">
            <summary>
            根据提供程序名称字符串和连接字符串，创建提供程序实例
            </summary>
            <param name="providerName">供程序名称字符串，格式为：提供程序全名称,程序集名称</param>
            <param name="connectionString">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetDBHelper(System.String,System.String)">
            <summary>
            通过指定的数据库类型（值为SQLSERVER/OLEDB/ODBC/ORACLE 之一）和连接字符串创建一个新的数据访问对象，
            需要配置[DB]HelperAssembly，[DB]HelperType 键，[DB]值为SQLSERVER/OLEDB/ODBC/ORACLE 之一
            </summary>
            <param name="EngineType">数据库类型（值为SQLSERVER/OLEDB/ODBC/ORACLE 之一）</param>
            <param name="ConnectionString">连接字符串</param>
            <returns>数据访问对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetDBHelper(PWMIS.Common.DBMSType,System.String)">
            <summary>
            根据数据库管理系统枚举类型和连接字符串创建一个新的数据访问对象实例
            </summary>
            <param name="DbmsType">数据库类型媒介，有ACCESS/MYSQL/ORACLE/SQLSERVER/SYSBASE/UNKNOWN </param>
            <param name="ConnectionString">连接字符串</param>
            <returns>数据访问对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetDBHelper(System.String,System.String,System.String)">
            <summary>
            根据程序集名称和数据访问对象类型创建一个新的数据访问对象实例。
            </summary>
            <param name="HelperAssembly">程序集名称</param>
            <param name="HelperType">数据访问对象类型</param>
            <param name="ConnectionString">连接字符串</param>
            <returns>数据访问对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetDBHelper(System.String)">
            <summary>
            获得数据访问对象实例，EngineType值为SQLSERVER/OLEDB/ODBC/ORACLE 之一，默认使用 PWMIS.CommonDataProvider.Data.SqlServer
            </summary>
            <param name="EngineType">数据库引擎类型</param>
            <returns>数据访问对象实例</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetConnectionString">
            <summary>
            获得数据访问连接字符串，请在应用程序配置文件中创建 EngineType，[DB]HelperAssembly，[DB]HelperType ,[DB]ConnectionString键，值为SQLSERVER/OLEDB/ODBC/ORACLE 之一
            如果没有找到 [DB]ConnectionString 键，也可以直接使用 ConnectionString 键
            </summary>
            <returns>数据访问连接字符串</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.UpdateDataSet(System.Data.DataSet)">
            <summary>
            更新数据集(采用参数形式)，数据表如果指定了主键那么执行更新操作，否则执行插入操作。
            </summary>
            <param name="ds">数据集</param>
            <returns>查询结果受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.SaveDataSet(System.Data.DataSet,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            自动将数据集中的数据更新或者插入到数据库
            <remarks>更新时间：2011.11.16</remarks>
            </summary>
            <param name="ds"></param>
            <param name="DB"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.DeleteDataSet(System.Data.DataSet,System.String,System.String)">
            <summary>
            根据数据集中在指定的表中，根据表中的指定列的值在数据源中删除数据
            </summary>
            <param name="ds">数据集</param>
            <param name="tableName">表名称</param>
            <param name="columnName">列名</param>
            <returns>查询所影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.UpdateDataSet(System.Data.DataSet,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            更新数据集，带数据访问对象
            </summary>
            <param name="ds">数据集</param>
            <param name="DB">数据访问对象</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.DeleteDataSet(System.Data.DataSet,System.String,System.String,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            根据数据集中在指定的表中，根据表中的指定列的值在数据源中删除数据,带数据访问对象
            </summary>
            <param name="ds">数据集</param>
            <param name="tableName">表名称</param>
            <param name="columnName">列名</param>
            <param name="DB">数据访问对象</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.SelectDataSet(System.String,System.String[],System.Object[])">
            <summary>
            根据主键信息从数据源查询数据表到数据集中
            </summary>
            <param name="tableName">数据源中的表名称</param>
            <param name="pkNames">主键名称数组</param>
            <param name="pkValues">主键值数组，必须和主键名对应</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.SelectDataSet(System.String,System.String,System.String[],System.Object[],PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            根据主键信息从数据源查询数据表到数据集中
            </summary>
            <param name="fields">字段列表</param>
            <param name="tableName">数据源中的表名称</param>
            <param name="pkNames">主键名称数组</param>
            <param name="pkValues">主键值数组，必须和主键名对应</param>
            <param name="DB">数据访问对象</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.SelectDataSet(System.String,System.String,System.String[],System.Object[])">
            <summary>
            根据主键信息从数据源查询数据表到数据集中
            </summary>
            <param name="fields">字段列表</param>
            <param name="tableName">数据源中的表名称</param>
            <param name="pkNames">主键名称数组</param>
            <param name="pkValues">主键值数组，必须和主键名对应</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.UpdateField(System.Data.DataSet,System.String,System.String,System.Object,System.String,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            更新数据集中的字段到数据源中
            </summary>
            <param name="sDs">源数据集</param>
            <param name="tableName">要更新的表</param>
            <param name="fieldName">要更新的字段</param>
            <param name="fieldValue">字段的值</param>
            <param name="pkName">主键名称</param>
            <param name="DB">数据访问对象</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetDBParaChar(PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            获取特定数据库参数字符
            </summary>
            <param name="DB">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.UpdateDataTable(System.Data.DataTable,System.String)">
            <summary>
            更新数据表到数据源中
            </summary>
            <param name="dt"></param>
            <param name="SQL"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.SaveDataTable(System.Data.DataTable,System.String,System.String,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            自动保存数据表中的数据到数据库
            <remarks>更新时间：2011.11.16</remarks>
            </summary>
            <param name="dt"></param>
            <param name="insertSQL"></param>
            <param name="updateSQL"></param>
            <param name="DB"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.UpdateDataTable(System.Data.DataTable,System.String,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            更新数据表，带数据访问对象
            </summary>
            <param name="dt"></param>
            <param name="SQL"></param>
            <param name="DB"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetSqlUpdate(System.Data.DataTable)">
            <summary>
            为数据表生成更新SQL语句，参数名带@@前缀[不更新主键]
            </summary>
            <param name="dt">数据表</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetSqlInsert(System.Data.DataTable)">
            <summary>
            为数据表生成插入SQL语句，参数名带@@前缀
            </summary>
            <param name="dt">数据表</param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.DataProvider.Adapter.MyDB.Instance">
            <summary>
            数据访问静态实例对象，如果有事务并且有可能存在并发访问，请勿使用该属性，而是创建该类的动态实例对象。
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Adapter.MyDB.Message">
            <summary>
            获取当前操作信息
            </summary>
        </member>
        <member name="T:PWMIS.Common.DBMSType">
            <summary>
            数据库管理系统枚举
            </summary>
        </member>
        <member name="T:PWMIS.Common.DataSourceType">
            <summary>
            数据源类型
            </summary>
        </member>
        <member name="T:PWMIS.Common.ParamMapType">
            <summary>
            参数结构
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:PWMIS.Common.enumParamType">
            <summary>
            参数类型
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumParamType.DataParameter">
            <summary>
            参数
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumParamType.ReplacedText">
            <summary>
            替换文本
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:PWMIS.Common.enumQueryType">
            <summary>
            查询类型
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:PWMIS.Common.enumResultClass">
            <summary>
            结果类型
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumResultClass.ValueType">
            <summary>
            值类型，比如Integer，String 等
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumResultClass.DataSet">
            <summary>
            数据集
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumResultClass.EntityObject">
            <summary>
            实体对象，指定该类型后，需要指定 ResuleMap 属性
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumResultClass.EntityList">
            <summary>
            实体对象集合，指定该类型后，需要指定 ResuleMap 属性
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumResultClass.Default">
            <summary>
            默认类型，根据配置决定默认生成哪一种结果类型
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:PWMIS.Common.enumCompare">
            <summary>
            实体对象字段比较枚举
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumCompare.Greater">
            <summary>
            大于
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumCompare.NoGreater">
            <summary>
            不大于
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumCompare.Smaller">
            <summary>
            小于
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumCompare.NoSmaller">
            <summary>
            不小于
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumCompare.Equal">
            <summary>
            等于
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumCompare.NotEqual">
            <summary>
            不等于
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumCompare.Like">
            <summary>
            类似于
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumCompare.IsNull">
            <summary>
            空
            </summary>
        </member>
        <member name="F:PWMIS.Common.enumCompare.IsNotNull">
            <summary>
            非空
            </summary>
        </member>
        <member name="T:PWMIS.Common.EntityMapType">
            <summary>
            实体类的映射类型
            </summary>
        </member>
        <member name="F:PWMIS.Common.EntityMapType.Table">
            <summary>
            表实体类，该实体具有对数据库CRUD功能。
            </summary>
        </member>
        <member name="F:PWMIS.Common.EntityMapType.View">
            <summary>
            视图实体类，通常是数据库视图的映射，属性数据不能持久化。
            </summary>
        </member>
        <member name="F:PWMIS.Common.EntityMapType.SqlMap">
            <summary>
            SQL语句映射实体类，将从SQL-MAP实体配置文件中使用用户定义的查询。
            </summary>
        </member>
        <member name="F:PWMIS.Common.EntityMapType.StoredProcedure">
            <summary>
            存储过程，将从SQL-MAP实体配置文件中使用用户定义的存储过程名称和参数信息，需要采用SQL-MAP的参数语法
            </summary>
        </member>
        <member name="T:PWMIS.Core.CommonUtil">
            <summary>
            通用方法类
            </summary>
        </member>
        <member name="M:PWMIS.Core.CommonUtil.GetAssemblyResource(System.String,System.String)">
            <summary>
            从指定的程序集中获取一个嵌入式资源的文本内容
            </summary>
            <param name="assemblyName">程序集名称</param>
            <param name="resourceName">资源名称</param>
            <returns>资源内容</returns>
        </member>
        <member name="M:PWMIS.Core.CommonUtil.GetAssemblyResource(System.Type,System.String)">
            <summary>
            根据指定的类型，从该类型所在的程序集中获取指定的资源内容文本
            </summary>
            <param name="resourceType">与指定的类型</param>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.Core.CommonUtil.GetAssemblyResource(System.Reflection.Assembly,System.String)">
            <summary>
            在指定的程序集中寻找指定嵌入式资源文本内容
            </summary>
            <param name="assembly">资源所在的程序集</param>
            <param name="resourceName">资源的名称</param>
            <returns>嵌入式资源文本内容</returns>
        </member>
        <member name="M:PWMIS.Core.CommonUtil.PrepareSqlFields(System.String[])">
            <summary>
            为字段名加上中括号，避免字段名中有空格的问题
            </summary>
            <param name="fields">字段名称数组</param>
            <returns>新的字段名数组</returns>
        </member>
        <member name="M:PWMIS.Core.CommonUtil.ReplaceWebRootPath(System.String@)">
            <summary>
            替换Web路径格式中的相对虚拟路径（~）为当前程序执行的绝对路径
            </summary>
            <param name="sourcePath"></param>
        </member>
        <member name="M:PWMIS.Core.CommonUtil.ChangeType``1(System.Object)">
            <summary>
            泛型类型转换方法
            </summary>
            <example>
             object o1 = 111;
            int i = getProperty《int》(o1);
            o1 = DBNull.Value;
            i = getProperty《int》(o1);
            DateTime d = getProperty《DateTime》(o1);
            o1 = 123.33m;
            double db = getProperty《double》(o1);
            o1 = "123.4";
            float f = getProperty《float》(o1);
            o1 = null;
            f = getProperty《float》(o1);
            </example>
            <typeparam name="T">要转换的目标类型</typeparam>
            <param name="Value">Object类型的待转换对象</param>
            <returns>目标类型</returns>
        </member>
        <member name="M:PWMIS.Core.CommonUtil.TypeToDbType(System.Type)">
            <summary>
            Type 转换成 DbType
            </summary>
            <param name="t"></param>
            <returns></returns>
            <remarks>参考http://www.cnblogs.com/davinci/archive/2010/01/22/1654139.html</remarks>
        </member>
        <member name="M:PWMIS.Core.CommonUtil.ConvertType(System.Data.DbType)">
            <summary>
            DbType 转换成 Type
            </summary>
            <param name="dbType"></param>
            <returns></returns>
            <remarks>参考 http://www.cnblogs.com/davinci/archive/2010/01/22/1654139.html</remarks>
        </member>
        <member name="P:PWMIS.Core.CommonUtil.CacheEntityMapSql">
            <summary>
            缓存的SQLMAP实体类中映射的SQL，键为实体类的SQL查询名称
            </summary>
        </member>
        <member name="T:PWMIS.Core.IMemberAccessor">
            <summary>
            Abstraction of the function of accessing member of a object at runtime.
            </summary>
        </member>
        <member name="M:PWMIS.Core.IMemberAccessor.GetValue(System.Object,System.String)">
            <summary>
            Get the member value of an object.
            </summary>
            <param name="instance">The object to get the member value from.</param>
            <param name="memberName">The member name, could be the name of a property of field. Must be public member.</param>
            <returns>The member value</returns>
        </member>
        <member name="M:PWMIS.Core.IMemberAccessor.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Set the member value of an object.
            </summary>
            <param name="instance">The object to get the member value from.</param>
            <param name="memberName">The member name, could be the name of a property of field. Must be public member.</param>
            <param name="newValue">The new value of the property for the object instance.</param>
        </member>
        <member name="M:PWMIS.Core.DelegatedReflectionMemberAccessor.TryFindAccessor(System.Type,System.String)">
            <summary>
            在指定的类型中寻找指定属性名称的属性访问器，如果找不到返回空。
            </summary>
            <param name="type">对象类型</param>
            <param name="memberName">属性名称</param>
            <returns>属性访问起 </returns>
        </member>
        <member name="T:PWMIS.Core.HotNameValue`1">
            <summary>
            最热访问的名-值 对管理对象，节点被访问的次数越多，越容易被访问到的数据结构
            </summary>
        </member>
        <member name="M:PWMIS.Core.HotNameValue`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.Core.HotNameValue`1.#ctor(System.Int32)">
            <summary>
            初始化热点数据大小，不能大于64，建议在10以内，默认是3
            </summary>
            <param name="hot"></param>
        </member>
        <member name="M:PWMIS.Core.HotNameValue`1.SetDataOnFreeIndex(PWMIS.Core.HotNameValue{`0}.DataItem@)">
            <summary>
            获取扩展列表中的下一个空闲位置写入新的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.Core.HotNameValue`1.Get(System.String)">
            <summary>
            查找指定的键的值，如果找不到将抛出异常
            </summary>
            <param name="key">指定的键</param>
            <returns>指定的键的值</returns>
        </member>
        <member name="M:PWMIS.Core.HotNameValue`1.TryGet(System.String,`0@)">
            <summary>
            查找指定的键的值，但是找不到不抛出异常
            </summary>
            <param name="key">指定的键</param>
            <param name="result">指定的键的值</param>
            <returns>查找是否成功</returns>
        </member>
        <member name="M:PWMIS.Core.HotNameValue`1.Set(System.String,`0)">
            <summary>
            设置指定键的值，如果存在，则替换
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:PWMIS.Core.HotNameValue`1.At">
            <summary>
            发现目标的位置
            </summary>
        </member>
        <member name="P:PWMIS.Core.HotNameValue`1.Count">
            <summary>
            容器已经存储的元素总数量
            </summary>
        </member>
        <member name="P:PWMIS.Core.HotNameValue`1.CollidedCount">
            <summary>
            (键)碰撞的数量
            </summary>
        </member>
        <member name="P:PWMIS.Core.HotNameValue`1.Capacity">
            <summary>
            容量大小，默认是64K，不可设置比这个数更大的值。容器超过这个容量，则容量外的很少使用的元素将被移除。
            </summary>
        </member>
        <member name="F:PWMIS.Core.HotNameValue`1.DataItem.Key">
            <summary>
            原始的Key,可能跟散列的Key不一致，发生Key碰撞
            </summary>
        </member>
        <member name="F:PWMIS.Core.HotNameValue`1.DataItem.ExtNext">
            <summary>
            如果Key发生碰撞，那么新的节点的位置
            </summary>
        </member>
        <member name="P:PWMIS.Core.HotNameValue`1.DataItem.Value">
            <summary>
            获取或者设置值，线程安全
            </summary>
        </member>
        <member name="T:PWMIS.Core.MakeWordKey">
            <summary>
            以一个输入的字符串，从右向左扫描，得到一个16进制数字的字符串。不区分字符的大小写。
            </summary>
        </member>
        <member name="M:PWMIS.Core.MakeWordKey.MakeHexString(System.String)">
            <summary>
            构造一个小于0xFFFF 的16进制字符串
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.Core.MakeWordKey.Hex2Int(System.String)">
            <summary>
            将1个16进制字符串转换成一个整数
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.Core.MakeWordKey.String2Int(System.String)">
            <summary>
            将任意一个字符串转换成65536 以内的整数,方法自身线程安全
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.Core.MakeWordKey.HexString">
            <summary>
            获取当前的16进制字符串
            </summary>
        </member>
        <member name="T:PWMIS.Core.SpinLock">
            <summary>
            
            </summary>
        </member>
        <member name="M:PWMIS.Core.SpinLock.Acquire">
            <summary>
            获得自旋锁
            </summary>
        </member>
        <member name="M:PWMIS.Core.SpinLock.Release">
            <summary>
            释放自旋锁
            </summary>
        </member>
        <member name="T:PWMIS.Core.MemoryCache`1">
            <summary>
            内存缓存类
            </summary>
        </member>
        <member name="M:PWMIS.Core.MemoryCache`1.CleanUp">
            <summary>
            清理缓存
            </summary>
        </member>
        <member name="M:PWMIS.Core.MemoryCache`1.CheckCache">
            <summary>
            检查缓存是否符合情理条件，如果符合则出发清理操作
            </summary>
        </member>
        <member name="P:PWMIS.Core.MemoryCache`1.Default">
            <summary>
            获取当前类型的默认实例
            </summary>
        </member>
        <member name="M:PWMIS.Core.CacheValueItem`1.#ctor(`0)">
            <summary>
            新建一个缓存，制定名字和值
            </summary>
            <param name="cacheValue"></param>
        </member>
        <member name="P:PWMIS.Core.CacheValueItem`1.Value">
            <summary>
            缓存的值 
            </summary>
        </member>
        <member name="P:PWMIS.Core.CacheValueItem`1.CreateTime">
            <summary>
            缓存创建时间
            </summary>
        </member>
        <member name="P:PWMIS.Core.CacheValueItem`1.ExpireTime">
            <summary>
            缓存过期时间
            </summary>
        </member>
        <member name="P:PWMIS.Core.CacheValueItem`1.IsAbsoluteExpire">
            <summary>
            是否绝对过期。如果设置，则在设定的过期时间后缓存项被清除
            </summary>
        </member>
        <member name="P:PWMIS.Core.CacheValueItem`1.HitCount">
            <summary>
            缓存被命中的次数
            </summary>
        </member>
        <member name="P:PWMIS.Core.CacheItem`1.Name">
            <summary>
            缓存的名字
            </summary>
        </member>
        <member name="M:PWMIS.Core.RemoteLoader.TableFieldName(System.String,System.String)">
            <summary>
            根据指定的实体类中的属性名，返回实体类的表名称和属性对应的字段名称
            </summary>
            <param name="fullClassName">实体类名称</param>
            <param name="propertyName">属性名称</param>
            <returns>返回实体类的表名称和属性对应的字段名称</returns>
        </member>
        <member name="M:PWMIS.Core.LocalLoader.#ctor(System.String)">
            <summary>
            根据Pwmis.core.dll文件所在目录初始化加载器
            </summary>
            <param name="basePath"></param>
        </member>
        <member name="T:PWMIS.DataMap.ControlDataMap">
            <summary>
            BrainControl 的摘要说明。
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.ControlDataMap.FillData(System.Data.DataTable,System.Collections.ICollection)">
            <summary>
            将DataTable 填充到数据控件中
            </summary>
            <param name="dtTmp">数据表</param>
            <param name="controls">数据控件</param>
        </member>
        <member name="M:PWMIS.DataMap.ControlDataMap.FillData(System.Data.DataSet,System.Collections.ICollection)">
            <summary>
            将数据集 填充到数据控件中
            </summary>
            <param name="objData">数据集</param>
            <param name="controls">数据控件</param>
        </member>
        <member name="M:PWMIS.DataMap.ControlDataMap.FillData(System.Object,System.Collections.ICollection,System.Boolean)">
            <summary>
            将对象数据填充到数据控件上，要求falg=true,否则请使用另外的2个重载
            </summary>
            <param name="objData">数据对象，可以是实体类</param>
            <param name="controls">数据控件</param>
            <param name="flag">标记</param>
        </member>
        <member name="M:PWMIS.DataMap.ControlDataMap.FillData(System.Object,System.Collections.ICollection)">
            <summary>
            填充数据，根据数据源的类型自动决定使用何种方式
            </summary>
            <param name="objData">要填充提供的数据</param>
            <param name="controls">被填充的数据控件</param>
        </member>
        <member name="M:PWMIS.DataMap.ControlDataMap.CollectDataToObject``1(System.Collections.Generic.List{PWMIS.Common.IDataControl})">
            <summary>
            从智能数据控件中收集数据到一个新的对象中（如实体对象）
            </summary>
            <typeparam name="T">返回的对象类型</typeparam>
            <param name="controls">控件列表</param>
            <returns>一个新的对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.ControlDataMap.CollectQueryString(System.Collections.ICollection)">
            <summary>
            收集控件的查询字符串，例如已经为控件指定了查询条件比较符号。
            </summary>
            <param name="conlObject">容器对象</param>
            <returns>查询字符串</returns>
        </member>
        <member name="T:PWMIS.DataMap.DataTextBoxValue">
            <summary>
            数据文本框、标签控件值读写通用类，可以处理WinForm，WebForm等窗体的数据文本框控件和标签控件。
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.Access">
            <summary>
            Access 数据库访问类
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.OleDb">
            <summary>
            OleDbServer 数据处理
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.AdoHelper">
            <summary>
            公共数据访问抽象类 兼容 AdoHelper 类 ,实例使用方法参见 PWMIS.CommonDataProvider.Adapter.MyDB
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.CommonDB">
            <summary>
            公共数据访问基础类
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetDBMSType(PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            根据数据库实例获取数据库类型枚举
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.CreateInstance(System.String,System.String)">
            <summary>
            创建公共数据访问类的实例
            </summary>
            <param name="providerAssembly">提供这程序集名称</param>
            <param name="providerType">提供者类型</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetConnection">
            <summary>
            获取事务的数据连结对象
            </summary>
            <returns>数据连结对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetDbConnection">
            <summary>
            获取数据库连接对象实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetConnection(System.String)">
            <summary>
            获取数据连结对象实例
            </summary>
            <param name="connectionString">连接字符串</param>
            <returns>数据连结对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetDataAdapter(System.Data.IDbCommand)">
            <summary>
            获取数据适配器实例
            </summary>
            <returns>数据适配器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetParameter">
            <summary>
            获取一个新参数对象
            </summary>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            获取一个新参数对象
            </summary>
            <param name="paraName">参数名字</param>
            <param name="dbType">数据库数据类型</param>
            <param name="size">字段大小</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetParameter(System.String,System.Data.DbType)">
            <summary>
            获取一个新参数对象
            </summary>
            <param name="paraName">参数名字</param>
            <param name="dbType">>数据库数据类型</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetParameter(System.String,System.Object)">
            <summary>
            根据参数名和值返回参数一个新的参数对象
            </summary>
            <param name="paraName">参数名</param>
            <param name="Value">参数值</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            获取一个新参数对象
            </summary>
            <param name="paraName">参数名</param>
            <param name="dbType">参数值</param>
            <param name="size">参数大小</param>
            <param name="paraDirection">参数输出类型</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte)">
            <summary>
            获取一个新参数对象
            </summary>
            <param name="paraName">参数名</param>
            <param name="dbType">参数类型</param>
            <param name="size">参数值的长度</param>
            <param name="paraDirection">参数的输入输出类型</param>
            <param name="precision">参数值参数的精度</param>
            <param name="scale">参数的小数位位数</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetNativeDbTypeName(System.Data.IDataParameter)">
            <summary>
            获取当前数据库类型的参数数据类型名称
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetSchema(System.String,System.String[])">
            <summary>
            返回此 SqlConnection 的数据源的架构信息。
            </summary>
            <param name="collectionName">集合名称，可以为空</param>
            <param name="restrictionValues">请求的架构的一组限制值，可以为空</param>
            <returns>数据库架构信息表</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetSPDetail(System.String)">
            <summary>
            获取存储过程、函数的定义内容，如果子类支持，需要在子类中重写
            </summary>
            <param name="spName">存储过程名称</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetViweDetail(System.String)">
            <summary>
            获取视图定义，如果子类支持，需要在子类中重写
            </summary>
            <param name="viewName">视图名称</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.BeginTransaction">
            <summary>
            打开连接并开启事务
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            开启事务并指定事务隔离级别
            </summary>
            <param name="ilevel"></param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.Commit">
            <summary>
            提交事务并关闭连接
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.Rollback">
            <summary>
            回滚事务并关闭连接
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.OpenSession">
            <summary>
            打开一个数据库连接会话，你可以在其中执行一系列AdoHelper查询
            </summary>
            <returns>连接会话对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.CloseSession">
            <summary>
            关闭连接会话
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.PrepareSQL(System.String@)">
            <summary>
            对应SQL语句进行其它的处理，例如将SQLSERVER的字段名外的中括号替换成数据库特定的字符。该方法会在执行查询前调用，默认情况下不进行任何处理。
            </summary>
            <param name="SQL"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetPreparedSQL(System.String)">
            <summary>
            获取经过本地数据库类型处理过的SQL语句
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.CompleteCommand(System.Data.IDbCommand,System.String@,System.Data.CommandType@,System.Data.IDataParameter[]@)">
            <summary>
            完善命令对象,处理命令对象关联的事务和连接，如果未打开连接这里将打开它
            注意：为提高效率，不再继续内部进行参数克隆处理，请多条SQL语句不要使用同名的参数对象
            </summary>
            <param name="cmd">命令对象</param>
            <param name="SQL">SQL</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数数组</param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行不返回值的查询，如果此查询出现了错误并且设置 OnErrorThrow 属性为 是，将抛出错误；否则将返回 -1，此时请检查ErrorMessage属性；
            如果此查询在事务中并且出现了错误，将根据 OnErrorRollback 属性设置是否自动回滚事务。
            </summary>
            <param name="SQL">SQL</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数数组</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteNonQuery(System.String)">
            <summary>
            执行不返回值的查询，如果此查询出现了错误，将返回 -1，此时请检查ErrorMessage属性；
            如果此查询在事务中并且出现了错误，将根据 OnErrorRollback 属性设置是否自动回滚事务。
            </summary>
            <param name="SQL">SQL</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteInsertQuery(System.String,System.Data.CommandType,System.Data.IDataParameter[],System.Object@)">
            <summary>
            执行插入数据的查询，仅限于Access，SqlServer
            </summary>
            <param name="SQL">插入数据的SQL</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数数组</param>
            <param name="ID">要传出的本次操作的新插入数据行的主键ID值</param>
            <returns>本次查询受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteInsertQuery(System.String,System.Object@)">
            <summary>
            执行插入数据的查询
            </summary>
            <param name="SQL">插入数据的SQL</param>
            <param name="ID">要传出的本次操作的新插入数据行的主键ID值</param>
            <returns>本次查询受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteScalar(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行返回单一值得查询
            </summary>
            <param name="SQL">SQL</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数数组</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteScalar(System.String)">
            <summary>
            执行返回单一值得查询
            </summary>
            <param name="SQL">SQL</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataSet(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行返回数据集的查询
            </summary>
            <param name="SQL">SQL</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数数组</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataSetSchema(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行返回数据架构的查询，注意，不返回任何行
            </summary>
            <param name="SQL">SQL</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数数组</param>
            <returns>数据架构</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataSetWithSchema(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行查询,并返回具有数据架构的数据集(整个过程仅使用一次连接)
            </summary>
            <param name="SQL">查询语句</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">查询参数</param>
            <returns>具有数据架构的数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataSetWithSchema(System.String,System.Data.CommandType,System.Data.IDataParameter[],System.Data.DataSet)">
            <summary>
            执行查询,并以指定的(具有数据架构的)数据集来填充数据
            </summary>
            <param name="SQL">查询语句</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">查询参数</param>
            <param name="schemaDataSet">指定的(具有数据架构的)数据集</param>
            <returns>具有数据的数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataSet(System.String)">
            <summary>
            执行返回数据集的查询
            </summary>
            <param name="SQL">SQL</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataReaderWithSingleRow(System.String)">
            <summary>
            返回单一行的数据阅读器
            </summary>
            <param name="SQL">SQL</param>
            <returns>数据阅读器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataReaderWithSingleRow(System.String,System.Data.IDataParameter[])">
            <summary>
            返回单一行的数据阅读器
            </summary>
            <param name="SQL">SQL</param>
            <param name="paras">参数</param>
            <returns>数据阅读器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataReader(System.String)">
            <summary>
            根据查询返回数据阅读器对象，在非事务过程中，阅读完以后会自动关闭数据库连接
            </summary>
            <param name="SQL">SQL</param>
            <returns>数据阅读器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataReader(System.String,System.Data.CommandBehavior)">
            <summary>
            根据查询返回数据阅读器对象
            </summary>
            <param name="SQL">SQL</param>
            <param name="cmdBehavior">对查询和返回结果有影响的说明</param>
            <returns>数据阅读器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataReader(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            根据查询返回数据阅读器对象，但不可随机读取行内数据
            </summary>
            <param name="SQL">SQL</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数数组</param>
            <returns>数据阅读器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataReaderSequentialAccess(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            根据查询返回数据阅读器对象,可以顺序读取行内的大数据列
            </summary>
            <param name="SQL">SQL</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数数组</param>
            <returns>数据阅读器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataReader(System.String@,System.Data.CommandType,System.Data.CommandBehavior,System.Data.IDataParameter[]@)">
            <summary>
            根据查询返回数据阅读器对象
            </summary>
            <param name="SQL">SQL</param>
            <param name="commandType">命令类型</param>
            <param name="cmdBehavior">对查询和返回结果有影响的说明</param>
            <param name="parameters">参数数组</param>
            <returns>数据阅读器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.CloseConnection(System.Data.IDbConnection,System.Data.IDbCommand)">
            <summary>
            关闭连接
            </summary>
            <param name="conn">连接对象</param>
            <param name="cmd">命令对象</param>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.CommandTimeOut">
            <summary>
            执行SQL查询的超时时间，单位秒。不设置则取默认时间，详见MSDN。
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.CurrentDBMSType">
            <summary>
            当前数据库的类型枚举
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.ElapsedMilliseconds">
            <summary>
            获取最近一次执行查询的所耗费的时间，单位：毫秒
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.InsertKey">
            <summary>
            在插入具有自增列的数据后，获取刚才自增列的数据的方式，默认使用 @@IDENTITY，在其它具体数据库实现类可能需要重写该属性或者运行时动态指定。
            在SqlServer，默认使用SCOPE_IDENTITY()，可根据情况设置。
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.ConnectionString">
            <summary>
            数据连结字符串
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.DataWriteConnectionString">
            <summary>
            写入数据的连接字符串，ExecuteNoneQuery 方法将自动使用该连接
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.ConnectionStringBuilder">
            <summary>
            获取连接字符串构造类
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.ConnectionUserID">
            <summary>
            连接数据库用户的ID
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.ErrorMessage">
            <summary>
            数据操作的错误信息，请在每次查询后检查该信息。
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.OnErrorRollback">
            <summary>
            在事务执行期间，更新过程如果出现错误，是否自动回滚事务。默认为是。
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.OnErrorThrow">
            <summary>
            查询出现错误是否是将错误抛出。默认为是。
            如果设置为否，将简化调用程序的异常处理，但是请检查每次更新后受影响的结果数和错误信息来决定你的程序逻辑。
            如果在事务执行期间，期望出现错误后立刻结束处理，请设置本属性为 是。
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.Transaction">
            <summary>
            获取或者设置事务对象
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.GetParameterChar">
            <summary>
            获取参数名的标识字符，默认为SQLSERVER格式，如果其它数据库则可能需要重写该属性
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.SqlServerCompatible">
            <summary>
            SQL SERVER 兼容性设置，默认为兼容。该特性可以将SQLSERVER的语句移植到其它其它类型的数据库，例如字段分隔符号，日期函数等。
            如果是拼接字符串方式的查询，建议设置为False，避免在拼接ＳＱＬ的时候过滤掉'@'等特殊字符
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.CreateHelper(System.String)">
            <summary>
            根据应用程序配置文件的connectionStrings 配置中的name，创建数据访问对象
            </summary>
            <param name="connectionName">连接字符串配置项的名字</param>
            <returns>数据访问对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.CreateHelper(System.String,System.String)">
            <summary>
            创建公共数据访问类的实例
            </summary>
            <param name="providerAssembly">提供这程序集名称</param>
            <param name="providerType">提供者类型</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行不返回值的查询
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandType">命令类型</param>
            <param name="SQL">SQL</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行不返回值的查询
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandType">命令类型</param>
            <param name="SQL">SQL</param>
            <param name="parameters">参数数组</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行数据阅读器查询
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandType">命令类型</param>
            <param name="SQL">SQL</param>
            <param name="parameters">参数数组</param>
            <returns>数据阅读器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行返回数据集的查询
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandType">命令类型</param>
            <param name="SQL">SQL</param>
            <param name="parameters">参数数组</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行返回数据集的查询
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandType">命令类型</param>
            <param name="SQL">SQL</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行返回单一值得查询
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandType">命令类型</param>
            <param name="SQL">SQL</param>
            <param name="parameters">参数数组</param>
            <returns>结果</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.FormatExecuteNonQuery(System.String,System.Object[])">
            <summary>
            执行不返回结果集的查询。
            对于字符串类型的参数，最好指定参数的长度，格式例如是{0:50}；
            对于Decimal类型，最好指定精度和小数位，例如{0:8.3}，表示精度为8，小数位为3
            </summary>
            <param name="sqlFormat">带格式的查询命令字符串，例如SELECT * FROM TABLE1 WHERE CLASSID={0} AND CLASSNAME={1:50} PRICE={2:8.3}</param>
            <param name="parameters">要替换的参数</param>
            <returns>查询受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.FormatExecuteDataReader(System.String,System.Object[])">
            <summary>
            执行返回数据阅读器的查询
            对于字符串类型的参数，最好指定参数的长度，格式例如是{0:50}；
            对于Decimal类型，最好指定精度和小数位，例如{0:8.3}，表示精度为8，小数位为3
            </summary>
            <param name="sqlFormat">带格式的查询命令字符串，例如SELECT * FROM TABLE1 WHERE CLASSID={0} AND CLASSNAME={1:50} PRICE={2:8.3}</param>
            <param name="parameters">要替换的参数</param>
            <returns>数据阅读器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.FormatExecuteDataSet(System.String,System.Object[])">
            <summary>
            执行返回数据集的查询
            对于字符串类型的参数，最好指定参数的长度，格式例如是{0:50}；
            对于Decimal类型，最好指定精度和小数位，例如{0:8.3}，表示精度为8，小数位为3
            </summary>
            <param name="sqlFormat">带格式的查询命令字符串，例如SELECT * FROM TABLE1 WHERE CLASSID={0} AND CLASSNAME={1:50} PRICE={2:8.3}</param>
            <param name="parameters">要替换的参数</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.FormatExecuteScalar(System.String,System.Object[])">
            <summary>
            执行返回单值结果的查询
            对于字符串类型的参数，最好指定参数的长度，格式例如是{0:50}；
            对于Decimal类型，最好指定精度和小数位，例如{0:8.3}，表示精度为8，小数位为3
            </summary>
            <param name="sqlFormat">带格式的查询命令字符串，例如SELECT * FROM TABLE1 WHERE CLASSID={0} AND CLASSNAME={1:50} PRICE={2:8.3}</param>
            <param name="parameters">要替换的参数</param>
            <returns>返回的单值结果</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.GetList``1(PWMIS.DataProvider.Data.AdoHelper.Func{System.Data.IDataReader,``0},System.String,System.Object[])">
            <summary>
            根据查询，获取对象列表
            <example>
            <code>
            <![CDATA[
            AdoHelper dbLocal = new SqlServer();
            dbLocal.ConnectionString = "Data Source=.;Initial Catalog=LocalDB;Integrated Security=True";
            var dataList = dbLocal.GetList(reader =>
            {
                return new
               {
                   UID=reader.GetInt32(0),
                   Name=reader.GetString(1)
               };
            }, "SELECT UID,Name FROM Table_User WHERE Sex={0} And Height>={1:5.2}",1, 1.60M);
            
            ]]>
            </code>
            </example>
            </summary>
            <typeparam name="TResult">返回的对象的类型</typeparam>
            <param name="fun">要处理数据阅读器的具体方法，该方法将返回一个对象</param>
            <param name="sqlFormat">SQL 格式控制语句</param>
            <param name="parameters">用于替换的参数</param>
            <returns>对象列表</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.OleDb.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.OleDb.GetConnection">
            <summary>
            创建并且打开数据库连接
            </summary>
            <returns>数据库连接</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.OleDb.GetDataAdapter(System.Data.IDbCommand)">
            <summary>
            获取数据适配器实例
            </summary>
            <returns>数据适配器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.OleDb.GetParameter">
            <summary>
            获取一个新参数对象
            </summary>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.OleDb.GetParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
             获取一个新参数对象
            </summary>
            <param name="paraName">参数名</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.OleDb.GetSchema(System.String,System.String[])">
            <summary>
            返回此 OleDbConnection 的数据源的架构信息。
            </summary>
            <param name="collectionName">集合名称</param>
            <param name="restrictionValues">请求的架构的一组限制值</param>
            <returns>数据库架构信息表</returns>
        </member>
        <member name="P:PWMIS.DataProvider.Data.OleDb.CurrentDBMSType">
            <summary>
            获取当前数据库类型的枚举
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.OleDb.ConnectionDataSource">
            <summary>
            获取当前连接字符串中的数据源字符串，如果是|DataDirectory|，将返回数据源文件对应的绝对路径。
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Access.GetParameter(System.String,System.Object)">
            <summary>
            获取查询参数对象，如果参数值是日期类型，请调用此方法，否则调用其它重载方法后，给日期类型的参数值去除毫秒部分。
            </summary>
            <param name="paraName"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.DataProvider.Data.Access.CurrentDBMSType">
            <summary>
            获取当前数据库类型的枚举
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.Access.InsertKey">
            <summary>
            在插入具有自增列的数据后，获取刚才自增列的数据的
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.CommandLog">
            <summary>
            命令对象日志2008.7.18 增加线程处理,2011.5.9 增加执行时间记录
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.#ctor(System.Boolean)">
            <summary>
            是否开启执行时间记录
            </summary>
            <param name="startStopwatch"></param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.ReSet">
            <summary>
            重新开始记录执行时间
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.WriteLog(System.Data.IDbCommand,System.String,System.Int64@)">
            <summary>
            写命令日志和执行时间（如果开启的话）
            </summary>
            <param name="command">命令对象</param>
            <param name="who">调用命令的源名称</param>
            <param name="elapsedMilliseconds">执行时间</param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.WriteLog(System.String,System.String)">
             <summary>
            写入日志消息
             </summary>
             <param name="msg">消息</param>
             <param name="who">发送者</param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.WriteErrLog(System.Data.IDbCommand,System.String)">
            <summary>
            写错误日志，将使用 DataLogFile 配置键的文件名写文件，不受SaveCommandLog 影响，除非 DataLogFile 未设置或为空。
            </summary>
            <param name="command">命令对象</param>
            <param name="errmsg">调用命令的源名称</param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.GetLog">
            <summary>
            获取日志文本
            </summary>
            <returns>日志文本</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.RecordCommandLog(System.Data.IDbCommand,System.String)">
            <summary>
            记录命令信息
            </summary>
            <param name="command">命令对象</param>
            <param name="who">执行人</param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.WriteLog(System.String)">
            <summary>
            写入日志
            </summary>
            <param name="log"></param>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommandLog.DataLogFile">
            <summary>
            获取或者设置日志文件的路径，可以带Web相对路径
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommandLog.SaveCommandLog">
            <summary>
            是否记录日志文件
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommandLog.LogExecutedTime">
            <summary>
            需要记录的时间，只有该值等于0会记录所有查询，否则只记录大于该时间的查询。单位毫秒。
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommandLog.Instance">
            <summary>
            获取单例对象
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommandLog.CommandText">
            <summary>
            获取当前执行的实际SQL语句
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.ConnectionSession">
            <summary>
            连接会话对象类
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.ConnectionSession.#ctor(System.Data.IDbConnection)">
            <summary>
            以一个使用的连接初始化本类
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.ConnectionSession.Dispose">
            <summary>
            释放连接
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.Odbc">
            <summary>
            ODBC 数据访问类
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Odbc.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Odbc.GetConnection">
            <summary>
            创建并且打开数据库连接
            </summary>
            <returns>数据库连接</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Odbc.GetDataAdapter(System.Data.IDbCommand)">
            <summary>
            获取数据适配器实例
            </summary>
            <returns>数据适配器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Odbc.GetParameter">
            <summary>
            获取一个新参数对象
            </summary>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Odbc.GetParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
             获取一个新参数对象
            </summary>
            <param name="paraName">参数名</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Odbc.GetSchema(System.String,System.String[])">
            <summary>
            返回此 OdbcConnection 的数据源的架构信息。
            </summary>
            <param name="collectionName">集合名称</param>
            <param name="restrictionValues">请求的架构的一组限制值</param>
            <returns>数据库架构信息表</returns>
        </member>
        <member name="P:PWMIS.DataProvider.Data.Odbc.CurrentDBMSType">
            <summary>
            获取当前数据库类型的枚举
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.Oracle">
            <summary>
            OracleServer 数据处理
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Oracle.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Oracle.GetConnection">
            <summary>
            创建并且打开数据库连接
            </summary>
            <returns>数据库连接</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Oracle.GetDataAdapter(System.Data.IDbCommand)">
            <summary>
            获取数据适配器实例
            </summary>
            <returns>数据适配器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Oracle.GetParameter">
            <summary>
            获取一个新参数对象
            </summary>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Oracle.GetParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
             获取一个新参数对象
            </summary>
            <param name="paraName">参数名</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Oracle.GetSchema(System.String,System.String[])">
            <summary>
            返回此 OracleConnection 的数据源的架构信息。
            </summary>
            <param name="collectionName">集合名称</param>
            <param name="restrictionValues">请求的架构的一组限制值</param>
            <returns>数据库架构信息表</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Oracle.PrepareSQL(System.String@)">
            <summary>
            预处理SQL语句，语句中不能包含"["，"]"左右中括号，如果需要，请使用参数化查询。
            </summary>
            <param name="SQL"></param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.DataProvider.Data.Oracle.CurrentDBMSType">
            <summary>
            获取当前数据库类型的枚举
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.Oracle.GetParameterChar">
            <summary>
            获取Oracle数据库参数前缀资费
            <remarks>由网友路人甲.aspx 补充</remarks>
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.QueryException">
            <summary>
            查询异常类
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.QueryException.#ctor(System.String)">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.QueryException.#ctor(System.String,System.String,System.Data.CommandType,System.Data.IDataParameter[],System.Boolean,System.String)">
            <summary>
            使用命令信息初始化构造函数
            </summary>
            <param name="message"></param>
            <param name="sql"></param>
            <param name="cmdType"></param>
            <param name="parameters"></param>
            <param name="inTransaction"></param>
            <param name="connectionString"></param>
        </member>
        <member name="P:PWMIS.DataProvider.Data.QueryException.Sql">
            <summary>
            SQL
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.QueryException.CmdType">
            <summary>
            命令类型
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.QueryException.Parameters">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.QueryException.InTransaction">
            <summary>
            是否在事务中
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.QueryException.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.QueryException.Message">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.SqlServer">
            <summary>
            SqlServer 数据处理
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.GetConnection">
            <summary>
            创建并且打开数据库连接
            </summary>
            <returns>数据库连接</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.GetDataAdapter(System.Data.IDbCommand)">
            <summary>
            获取数据适配器实例
            </summary>
            <returns>数据适配器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.GetParameter">
            <summary>
            获取一个新参数对象
            </summary>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.GetParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
             获取一个新参数对象
            </summary>
            <param name="paraName">参数名</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.ExecuteDataSetWithSchema(System.String,System.Data.CommandType,System.Data.IDataParameter[],System.Data.DataSet)">
            <summary>
            执行查询,并以指定的(具有数据架构的)数据集来填充数据
            </summary>
            <param name="SQL">查询语句</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">查询参数</param>
            <param name="schemaDataSet">指定的(具有数据架构的)数据集</param>
            <returns>具有数据的数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.ExecuteTypedDataSet(System.String,System.Data.CommandType,System.Data.IDataParameter[],System.Data.DataSet,System.String)">
            <summary>
            执行强类型的数据集查询
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">查询参数</param>
            <param name="schemaDataSet">强类型的数据集</param>
            <param name="tableName">要填充的表名称</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.GetSchema(System.String,System.String[])">
            <summary>
            返回此 SqlConnection 的数据源的架构信息。
            </summary>
            <param name="collectionName">集合名称</param>
            <param name="restrictionValues">请求的架构的一组限制值</param>
            <returns>数据库架构信息表</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.GetSPDetail(System.String)">
            <summary>
            获取存储过程的定义内容
            </summary>
            <param name="spName">存储过程名称</param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.GetViweDetail(System.String)">
            <summary>
            获取视图定义，如果子类支持，需要在子类中重写
            </summary>
            <param name="viewName">视图名称</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.BulkCopy(System.Data.IDataReader,System.String,System.String,System.Int32)">
            <summary>
            SQL批量复制
            </summary>
            <param name="sourceReader">数据源的DataReader</param>
            <param name="connectionString">目标数据库的连接字符串</param>
            <param name="destinationTableName">要导入的目标表名称</param>
            <param name="batchSize">每次批量处理的大小</param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.BulkCopy(System.Data.DataTable,System.String,System.String,System.Int32)">
            <summary>
            SQL批量复制
            </summary>
            <param name="sourceTable">数据源表</param>
            <param name="connectionString">目标数据库的连接字符串</param>
            <param name="destinationTableName">要导入的目标表名称</param>
            <param name="batchSize">每次批量处理的大小</param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.ExecuteInsertQuery(System.String,System.Data.CommandType,System.Data.IDataParameter[],System.Object@)">
            <summary>
            SqlServer 执行插入数据的查询，如果执行成功，受影响的行数只会返回1
            </summary>
            <param name="SQL">插入数据的SQL</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数数组</param>
            <param name="ID">要传出的本次操作的新插入数据行的主键ID值</param>
            <returns>本次查询受影响的行数</returns>
        </member>
        <member name="P:PWMIS.DataProvider.Data.SqlServer.CurrentDBMSType">
            <summary>
            获取当前数据库类型的枚举
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.SqlServerCe">
            <summary>
            SqlServerCe 数据处理
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServerCe.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServerCe.GetConnection">
            <summary>
            创建并且打开数据库连接
            </summary>
            <returns>数据库连接</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServerCe.GetDataAdapter(System.Data.IDbCommand)">
            <summary>
            获取数据适配器实例
            </summary>
            <returns>数据适配器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServerCe.GetParameter">
            <summary>
            获取一个新参数对象
            </summary>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServerCe.GetParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
             获取一个新参数对象
            </summary>
            <param name="paraName">参数名</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServerCe.GetSchema(System.String,System.String[])">
            <summary>
            返回此 SqlConnection 的数据源的架构信息。
            </summary>
            <param name="collectionName">集合名称</param>
            <param name="restrictionValues">请求的架构的一组限制值</param>
            <returns>数据库架构信息表</returns>
        </member>
        <member name="P:PWMIS.DataProvider.Data.SqlServerCe.CurrentDBMSType">
            <summary>
            获取当前数据库类型的枚举
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityBuilder">
            <summary>
            PDF.NET实体类构造器，程序内部使用
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBuilder.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="targetType">被实现或者继承的类型</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBuilder.RegisterType(System.Type,System.Type)">
            <summary>
            注册实体类的具体实现类
            </summary>
            <param name="interfaceType">接口类型</param>
            <param name="instanceType">实例类型</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBuilder.CreateEntity``1">
            <summary>
            根据接口类型，创建实体类的实例
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBuilder.Build">
            <summary>
            构造实体类
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBuilder.BuildConstructor(System.Reflection.Emit.TypeBuilder,System.Type,System.String)">
            <summary>
            构造构造函数
            </summary>
            <param name="typeBuilder"></param>
            <param name="newTypeParent"></param>
            <param name="newTypeName"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBuilder.SetFieldNamesIL(System.Type,System.Reflection.Emit.MethodBuilder,System.String[])">
            <summary>
            重载 SetFieldNames 方法
            </summary>
            <param name="baseType"></param>
            <param name="methodBuilder"></param>
            <param name="names"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBuilder.GeterIL(System.String,System.Type,System.Type,System.Reflection.Emit.MethodBuilder)">
            <summary>
            构造Get访问器
            </summary>
            <param name="propertyName"></param>
            <param name="baseType"></param>
            <param name="propertyType"></param>
            <param name="methodBuilder"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBuilder.SeterIL(System.String,System.Type,System.Type,System.Reflection.Emit.MethodBuilder)">
            <summary>
            构造Set访问器
            </summary>
            <param name="propertyName"></param>
            <param name="baseType"></param>
            <param name="propertyType"></param>
            <param name="methodBuilder"></param>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityContainer">
            <summary>
            实体数据容器
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.#ctor(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            使用OQL表达式和数据访问对象实例初始化。如果OQL未设置记录数量（等于0），那么查询会先进行一次记录数量查询。
            </summary>
            <param name="oql">OQL表达式</param>
            <param name="db">数据访问对象实例</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.#ctor(PWMIS.DataMap.Entity.OQL)">
            <summary>
            使用查询表达式初始化。如果OQL未设置记录数量（等于0），那么查询会先进行一次记录数量查询。
            </summary>
            <param name="oql"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.Execute">
            <summary>
            执行OQL查询，并将查询结果缓存。如果未设置记录数量，那么查询会先进行一次记录数量查询。
            </summary>
            <returns>结果的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.Execute(System.Data.IDataReader)">
            <summary>
            执行DataReader查询，并将查询结果缓存
            </summary>
            <param name="reader">数据阅读器</param>
            <returns>结果行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.GetItemValues">
            <summary>
            获取容器数据中的每一行的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.Map``1">
            <summary>
            将数据从容器中映射到实体中
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.GetItemValue``1(System.String)">
            <summary>
            根据字段名，从当前行获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.GetItemValue``1(System.Int32)">
            <summary>
            根据字段索引，从当前行获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.Map``1(PWMIS.DataMap.Entity.EntityContainer.Func{``0})">
            <summary>
            采用自定义的映射方式，将数据容器中的数据映射到指定的类中 
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="fun">处理数据的方法</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.MapToList``1(PWMIS.DataMap.Entity.EntityContainer.MyFunc{``0})">
            <summary>
            将结果映射到相应类型的列表（可以使匿名类型）
            <example>
            <code>
            <![CDATA[
            OQL q=OQL.From(entity1)
                     .Join(entity2).On(entity1.PK,entity2.FK)
                     .Select(entity1.Field1,entity2.Field2)
                  .End;
            EntityContainer ec=new EntityContainer(q);
            var list=ec.MapToList(()=>
                     {
                        return new {
                                     Property1=ec.GetItemValue<int>(0), 
                                     Property2=ec.GetItemValue<string>(1) 
                                   };
                     });
            
            foreache(var item in list)
            {
                Console.WriteLine("Property1={0},Property2={1}",item.Property1,item.Property2);
            }
            ]]>
            </code>
            </example>
            </summary>
            <typeparam name="TResult">要映射的结果类型</typeparam>
            <param name="fun">自定义的返回结果类型的函数</param>
            <returns>结果列表</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.ToObjectList``1(PWMIS.DataMap.Entity.ECResultFunc{``0})">
            <summary>
            将实体类容器转换为对象列表
            <example>
            <code>
            <![CDATA[
            OQL q=OQL.From(entity1)
                     .Join(entity2).On(entity1.PK,entity2.FK)
                     .Select(entity1.Field1,entity2.Field2)
                  .End;
            EntityContainer ec=new EntityContainer(q);
            var list=ec.ToObjectList( e =>
                     {
                        return new {
                                     Property1=e.GetItemValue<int>(0), 
                                     Property2=e.GetItemValue<string>(1) 
                                   };
                     });
            
            foreache(var item in list)
            {
                Console.WriteLine("Property1={0},Property2={1}",item.Property1,item.Property2);
            }
            ]]>
            </code>
            </example>
            </summary>
            <typeparam name="TResult">结果的列表元素类型</typeparam>
            <param name="fun">容器结果委托函数</param>
            <returns>对象列表</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.MapToDataTable(System.String)">
            <summary>
            将容器的结果数据映射到DataTable
            </summary>
            <param name="tableName">表名称</param>
            <returns>DataTable</returns>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityContainer.OQL">
            <summary>
            查询表达式
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityContainer.DataBase">
            <summary>
            数据访问对象
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityContainer.FieldNames">
            <summary>
            获取容器数据中的字段名数组
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityContainer.Func`1">
            <summary>
            以 TResult为输入参数，并返回此类型的函数的委托定义
            </summary>
            <typeparam name="TResult">输入类型</typeparam>
            <param name="arg">参数</param>
            <returns></returns>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityContainer.MyFunc`1">
            <summary>
            返回一个结果类型的泛型委托函数
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:PWMIS.DataMap.Entity.Entity">
            <summary>
            PWMIS 实体类 基类,该类在 PDF.NET 4.0中已经过时。
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.Entity._propertyList">
            <summary>
            属性-值列表，键 不区分大小写
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.Entity.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.Entity.getProperty(System.String)">
            <summary>
            获取属性
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.Entity.AddProperty(System.String,System.Object)">
            <summary>
            增加属性及其默认值
            </summary>
            <param name="name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.Entity.setProperty(System.String,System.Object)">
            <summary>
            设置属性
            </summary>
            <param name="name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.Entity.dbSetProperty(System.String,System.Object)">
            <summary>
            从数据库设置属性值
            </summary>
            <param name="name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.Entity.setProperty(System.String,System.String,System.Int32)">
            <summary>
            设置属性，如果值是字符类型且设置了最大长度大于0，那么不允许设置大于此长度的字符串
            </summary>
            <param name="name">字段名称</param>
            <param name="Value">值</param>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.Entity.OnPropertyGeting(System.String)">
            <summary>
            获取属性的时候
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:PWMIS.DataMap.Entity.Entity.IdentityName">
            <summary>
            标识字段名称（有些数据库可能内置不支持），该字段不可更新，但是插入数据的时候可以获取该字段
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.Entity.PrimaryKeys">
            <summary>
            主键字段名称列表
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.Entity.PropertyList">
            <summary>
            获取属性列表
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.Entity.PropertyChangedList">
            <summary>
            获取值改变的属性
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.Entity.TableName">
            <summary>
            表名称
            </summary>
        </member>
        <member name="E:PWMIS.DataMap.Entity.Entity.PropertyChanged">
            <summary>
            属性改变事件
            </summary>
        </member>
        <member name="E:PWMIS.DataMap.Entity.Entity.PropertyGetting">
            <summary>
            属性获取事件
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.PropertyGettingEventArgs">
            <summary>
            属性获取事件
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.PropertyGettingEventArgs.#ctor(System.String)">
            <summary>
            以属性名称初始化本类
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:PWMIS.DataMap.Entity.PropertyGettingEventArgs.PropertyName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityBase">
            <summary>
            PDF.NET 5.1 实体类基础类
            </summary>
        </member>
        <member name="T:PWMIS.Common.IEntity">
            <summary>
            实体类接口
            </summary>
        </member>
        <member name="M:PWMIS.Common.IEntity.GetIdentityName">
            <summary>
            标识字段名称
            </summary>
        </member>
        <member name="M:PWMIS.Common.IEntity.PropertyList(System.String)">
            <summary>
            获取属性列的值
            </summary>
            <param name="propertyName">属性字段名称</param>
            <returns>属性值</returns>
        </member>
        <member name="M:PWMIS.Common.IEntity.GetTableName">
            <summary>
            数据表名称
            </summary>
        </member>
        <member name="P:PWMIS.Common.IEntity.PrimaryKeys">
            <summary>
            获取主键
            </summary>
        </member>
        <member name="P:PWMIS.Common.IEntity.PropertyNames">
            <summary>
            获取属性字段名数组
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.SetStringFieldSize(System.String,System.Int32)">
            <summary>
            设置字符串类型的属性字段在数据库读写的时候使用的字段长度。
            注意这这个设置将一直有效且只对字符串类型的字段有效，除非再次重新设置。
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="length">字段长度</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.SetFieldNames">
            <summary>
            设置实体类的对应的字段名称数组
            新版本子类可以实现这个细节,否则框架将反射获得该信息(该特性有利于简化手写的代码)。
            <remarks>为了兼容性,这里不作为抽象方法</remarks>
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.EntityBase.foreignKeys">
            <summary>
            外键
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.MapNewTableName(System.String)">
            <summary>
            将实体类的表名称映射到一个新的表名称
            </summary>
            <param name="newTableName">新的表名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.ResetChanges">
            <summary>
            重置属性值的修改状态
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.ResetChanges(System.Boolean)">
            <summary>
            重置实体类全部属性的修改标记。注意，EntityQuery将根据该标记决定更新哪些字段到数据库，
            它只更新标记为已经修改的实体类属性
            </summary>
            <param name="flag">是否已经修改</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.SetDefaultChanges">
            <summary>
            设置属性的值是否跟默认值一样，如果一样则表示该属性未更改过，例如在分布式系统中DTO转换到实体类对象后的处理。
            <remarks>2013.3.26 增加，用在WebService或者WCF的系统中</remarks>
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.OnPropertyGeting(System.String)">
            <summary>
            获取属性的时候
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            触发属性改变事件
            </summary>
            <param name="e">属性改变事件对象</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.GetTableName">
            <summary>
            获取表名称。如果实体类有分表策略，那么请重写该方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.GetSetPropertyFieldName">
            <summary>
            获取设置过的属性字段名称，用于映射到表字段的属性进行赋值操作之后
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.TestWriteProperty">
            <summary>
            测试写入属性（仅程序集内部使用）
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.AddPropertyName(System.String)">
            <summary>
            新增加实体虚拟字段属性，用来传递内容
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.PropertyList(System.String)">
            <summary>
            获取属性列的值
            </summary>
            <param name="propertyName">属性字段名称</param>
            <returns>属性值</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.getProperty(System.String,System.TypeCode)">
            <summary>
            获取属性值
            </summary>
            <param name="propertyName">属性字段名称</param>
            <param name="t">属性类型代码</param>
            <returns>属性值</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.getProperty``1(System.String)">
            <summary>
            获取属性值
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="propertyName">属性名称</param>
            <returns>属性值</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.setProperty(System.String,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="propertyName">属性字段名称</param>
            <param name="Value">属性值</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.setProperty(System.String,System.String,System.Int32)">
            <summary>
            设置属性，如果值是字符类型且设置了最大长度大于0，那么不允许设置大于此长度的字符串
            </summary>
            <param name="name">字段名称</param>
            <param name="Value">值</param>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.GetNameValues">
            <summary>
            获取实体类的属性名值对对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.SetPropertyValues(System.Object[])">
            <summary>
            设置所有属性的值
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.Clone">
            <summary>
            获取当前对象的浅表副本
            </summary>
            <returns>当前对象的浅表副本</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.InitMetaDataExt">
            <summary>
            初始化元数据扩展，比如在此中手工设置子实体类与父实体类的外键关系，
            如果在用户的分部类文件中重写该方法，可以防止代码生成器覆盖该方法
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.SetForeignKey``1(System.String)">
            <summary>
            设置对应于父实体类的外键字段名称
            </summary>
            <typeparam name="Parent">父实体类</typeparam>
            <param name="fieldName">外键字段名称，必须是当前实体类使用的一个字段</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.GetForeignKey``1">
            <summary>
            获取对应的父实体类的外键字段名称，如果没有，返回空字符串
            </summary>
            <typeparam name="Parent">父实体类</typeparam>
            <returns>外键字段名称，必须是当前实体类使用的一个字段</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.MapFrom(System.Object)">
            <summary>
            从POCO实体类获取跟当前实体类的属性名称相同的属性的值，拷贝到当前实体类中，完成数据的映射。
            要求拷贝的同名属性是读写属性且类型相同。
            </summary>
            <param name="pocoClass">POCO实体类，提供源数据</param>
            <returns>映射成功的属性数量</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.MapToPOCO(System.Object)">
            <summary>
            将当前实体类的属性值映射到相同属性名称的POCO实体类中。要求拷贝的同名属性是读写属性且类型相同。
            </summary>
            <param name="pocoClass">POCO实体类</param>
            <returns>映射成功的属性数量</returns>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityBase.EntityMap">
            <summary>
            实体类的映射类型
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityBase.IdentityName">
            <summary>
            标识字段名称（有些数据库可能内置不支持），该字段不可更新，但是插入数据的时候可以获取该字段
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityBase.TableName">
            <summary>
            实体类对应的数据库表名称
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityBase.PropertyChangedList">
            <summary>
            属性值被改变的属性名列表
            </summary>
        </member>
        <member name="E:PWMIS.DataMap.Entity.EntityBase.PropertyGetting">
            <summary>
            属性获取事件
            </summary>
        </member>
        <member name="E:PWMIS.DataMap.Entity.EntityBase.PropertyChanged">
            <summary>
            属性改变事件
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityBase.PrimaryKeys">
            <summary>
            主键字段名称列表
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityBase.PropertyNames">
            <summary>
            属性字段名列表
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityBase.PropertyValues">
            <summary>
            属性值列表
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityBase.Item(System.String)">
            <summary>
            获取或者设置指定属性名称的值，属性名必须是一个PDF.NET实体类的属性（调用了getProperty 和 setProperty方法），不能是普通属性。
            如果属性不存在，获取该属性值将为null，而设置该属性值将抛出异常。
            </summary>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityBase.Item(System.Int32)">
            <summary>
            获取指定索引位置的属性的值
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityCommand">
            <summary>
            实体类命令，将实体类转换成合适的SQL更新语句和参数
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.EntityCommand.IdentityEnable">
            <summary>
            插入数据的时候是否插入自增列，默认否
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityCommand.TargetFields">
            <summary>
            要操作的目标表的所有字段名
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityCommand.CreateTableCommand">
            <summary>
            获取创建表的命令脚本
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityFields">
            <summary>
            存储实体类的全局字段信息，以一种更为方便的方式访问实体类属性和对应的表字段
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityFields.GetPropertyName(System.String)">
            <summary>
            根据字段名获取对应的属性名
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityFields.GetPropertyType(System.String)">
            <summary>
            根据字段名称获取对应的实体属性类型
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityFields.GetPropertyField(System.String)">
            <summary>
            获取属性名对应的字段名
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityFields.Init(System.Type)">
            <summary>
            初始化实体信息（已经过时）
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityFields.CreateTableColumnScript(PWMIS.DataProvider.Data.AdoHelper,PWMIS.DataMap.Entity.EntityBase,System.String)">
            <summary>
            为实体类的一个属性创建对应的数据库表的列的脚本
            </summary>
            <param name="db"></param>
            <param name="entity"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityFields.Fields">
            <summary>
            获取实体类对应的表字段名称数组
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityFields.PropertyNames">
            <summary>
            获取实体属性名称数组
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityFields.TableName">
            <summary>
            获取实体类对应的表名称
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityFields.PropertyType">
            <summary>
            获取实体属性的类型
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityFieldsCache">
            <summary>
            实体字段缓存
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityFieldsCache.Item(System.Type)">
            <summary>
            获取缓存项，如果没有，将自动创建一个
            </summary>
            <param name="entityType">实体类类型</param>
            <returns></returns>
        </member>
        <member name="T:PWMIS.DataMap.Entity.ConditionHandle`1">
            <summary>
            实体类查询条件委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityQuery`1">
            <summary>
            实体对象查询查询类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.#ctor(PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            采用一个数据库操作对象实例初始化本类
            </summary>
            <param name="db">数据库操作对象实例</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.ExistsEntity(`0)">
            <summary>
            检测实体类是否在数据库存在
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.FillEntity(`0)">
            <summary>
            填充实体对象，必须有主键值才可以填充成功
            </summary>
            <param name="entity">实体对象实例，必须为主键字段属性设置值</param>
            <returns>返回填充是否成功</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.FillEntityList(PWMIS.DataMap.Entity.OQL,`0)">
            <summary>
            [网友左眼提供]以OQL为查询，并且附加当前类型的实体类中改变了值的属性 为查询条件
            </summary>
            <param name="oql">OQL表达式</param>
            <param name="entity">实体类实例对象</param>
            <returns>实体类集合</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.FillParameter(PWMIS.DataMap.Entity.OQL,`0,System.Data.IDataParameter[]@)">
            <summary>
            根据实体填充参数,返回sql
            </summary>
            <param name="oql"></param>
            <param name="entity"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Fill(`0)">
            <summary>
            采用默认的数据操作对象，填充实体对象，必须有主键值才可以填充成功。注意：该方法可能线程不安全，请使用实例对象的方法 FillEntity 。
            </summary>
            <param name="entity">实体对象实例，必须为主键字段属性设置值</param>
            <returns>返回填充是否成功</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryList(PWMIS.DataMap.Entity.OQL,`0)">
            <summary>
            [网友左眼提供]以OQL为查询，并且附加当前类型的实体类中改变了值的属性 为查询条件
            </summary>
            <param name="oql">OQL表达式</param>
            <param name="entity">实体类实例对象</param>
            <returns>实体类集合</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.GetObject(PWMIS.DataMap.Entity.OQL)">
            <summary>
            根据实体查询表达式对象，查询符合条件的一个实体对象
            </summary>
            <param name="oql">OQL表达式</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryObject(PWMIS.DataMap.Entity.OQL)">
            <summary>
            根据实体查询表达式对象，查询符合条件的一个实体对象
            </summary>
            <param name="oql">OQL表达式</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryObject(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            根据实体查询表达式对象，查询符合条件的一个实体对象。如果数据访问对象未在事务中，方法执行完后将自动关闭数据库连接。
            </summary>
            <param name="oql">OQL表达式</param>
            <param name="db">数据访问对象实例</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryObject(System.Data.IDataReader)">
            <summary>
            根据数据阅读器，返回指定的对象。如果数据访问对象未在事务中，方法执行完后将自动关闭数据库连接。
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.GetList(PWMIS.DataMap.Entity.OQL)">
            <summary>
            根据实体查询表达式对象，查询实体对象集合，如果未查询到结果，集合元素数量为0。
            </summary>
            <param name="oql">实体对象查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryList(PWMIS.DataMap.Entity.OQL)">
            <summary>
            根据实体查询表达式对象，查询实体对象集合，如果未查询到结果，集合元素数量为0。
            注意，该方法将使用默认的数据访问对象 MyDB.Instance，如果你在事务中请使用另一个重载方法，传入事务相关的数据访问对象。
            </summary>
            <param name="oql">实体对象查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryList(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            根据实体查询表达式对象，和当前数据库操作对象，查询实体对象集合
            如果OQL的PageWithAllRecordCount 等于0且指定了分页，则会执行一次统计记录数量的查询，
            执行本方法后，OQL对象PageWithAllRecordCount 会得到实际的值
            </summary>
            <param name="oql">实体查询表达式对象</param>
            <param name="db">数据库操作对象</param>
            <returns>实体对象集合</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryListByCache(System.String,PWMIS.DataMap.Entity.OQLCacheFunc,PWMIS.DataMap.Entity.SqlInfoAction,System.Object,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            缓存OQL的结果然后从数据库查询数据，使得不必每次处理OQL对象。
            </summary>
            <param name="cacheKey">要缓存的Ｋｅｙ</param>
            <param name="oqlFun">如果没有缓存的项，要初始化缓存项的委托函数</param>
            <param name="action">要处理的查询的委托</param>
            <param name="paraValueObject">相关的初始化操作的参数对象</param>
            <param name="db">数据访问对象</param>
            <returns>实体类集合</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.GetMapSql(System.Type)">
            <summary>
            根据EntityMapSql的全名称 "名称空间名字.SQL名字" 获取映射的SQL语句
            </summary>
            <param name="entityType">根据当前实体类所在程序集，获取其中的嵌入式EntityMapSql 文件</param>
            <returns>映射的SQL语句</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryList(System.Data.IDataReader)">
            <summary>
            根据数据阅读器对象，查询实体对象集合(注意查询完毕将自动释放该阅读器对象)
            </summary>
            <param name="reader">数据阅读器对象</param>
            <returns>实体类集合</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryList(PWMIS.DataMap.Entity.ConditionHandle{`0})">
            <summary>
            根据指定的条件，从数据阅读器中赛选出需要的实体对象。本方法适用于数据量不是很大的数据库表，要加强效率，请使用OQL表达式。
            </summary>
            <param name="condition">查询条件</param>
            <returns>实体对象列表</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryChild``1(System.Collections.Generic.IEnumerable{`0},PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            查询实体类集合关联的子实体类
            </summary>
            <typeparam name="TChild"></typeparam>
            <param name="entitys"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.GetChildEntityListPropertyName``1">
            <summary>
            获取当前实体类的具有枚举功能的属性的名字
            </summary>
            <typeparam name="TChild">子实体类集合属性的元素类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryListWithChild(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            查询实体类集合，并同时查询关联的所有的子实体类集合
            </summary>
            <param name="oql"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Insert(`0)">
            <summary>
            插入一个实体对象
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Insert(System.Collections.Generic.List{`0})">
            <summary>
            插入一个实体对象集合（使用事务方式）
            </summary>
            <param name="entityList">实体对象集合</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QuickInsert(System.Collections.Generic.List{`0})">
            <summary>
            快速插入实体类到数据库，注意，该方法假设要插入的实体类集合中每个实体修改的字段都是一样的。
            同时，插入完成后不会处理“自增”实体的属性，也不会重置实体类的修改状态。
            如果不符合这些要求，请直接调用Insert 方法。
            </summary>
            <param name="entityList"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Update(`0)">
            <summary>
            修改一个实体对象
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Update(System.Collections.Generic.List{`0})">
            <summary>
            更新一个实体类集合（内部采用事务方式）
            </summary>
            <param name="entityList">实体类集合</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Delete(`0)">
            <summary>
            从数据库删除实体对象对应的记录
            </summary>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Delete(System.Collections.Generic.List{`0})">
            <summary>
            删除一个实体类集合（内部采用事务方式）
            </summary>
            <param name="entityList">实体类集合</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.ExecuteOql(PWMIS.DataMap.Entity.OQL)">
            <summary>
            执行一个不返回结果集的OQL查询表达式，例如更新，删除实体类的操作
            </summary>
            <param name="oql">实体查询表达式</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.ExecuteOql(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
             执行一个不返回结果集的OQL查询表达式，例如更新，删除实体类的操作。使用自定义的数据访问对象进行操作
            </summary>
            <param name="oql"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.#ctor(`0)">
            <summary>
            使用一个实体类初始化本类，将探测数据库中是否存在本实体类对应的记录（为提高效率，建议使用另外一个重载）
            </summary>
            <param name="entity">实体类</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.#ctor(`0,System.Boolean)">
            <summary>
            使用一个实体类初始化本类，并指明该实体类持久化时新增还是修改
            </summary>
            <param name="entity">实体类</param>
            <param name="newEntity">是否是新实体</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Save(System.Object[])">
            <summary>
            保存(使用指定的属性)数据到数据库。如果属性值自使用本类以来没有改变过或者没有为本方法指定实体对象的属性字段，那么将不会更新任何数据。
            </summary>
            <param name="fields">实体类属性值列表</param>
            <returns>操作数据库影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Save(PWMIS.DataProvider.Data.CommonDB,System.Object[])">
            <summary>
            使用带事务的数据库对象，保存(使用指定的属性)数据到数据库。
            如果属性值自使用本类以来没有改变过或者没有为本方法指定实体对象的属性字段，那么将不会更新任何数据。
            </summary>
            <param name="db">数据库对象，可以在外部开启事务</param>
            <param name="fields">实体类属性值列表</param>
            <returns>操作数据库影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.SaveAllChanges(PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            保存自实体类申明以来，所有做过的修改到数据库。
            </summary>
            <param name="db">数据库访问对象实例</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.SaveAllChanges">
            <summary>
            保存自实体类申明以来，所有做过的修改到数据库。
            </summary>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Delete(`0,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            删除实体对象的动态实例方法，CommonDB 可以是开启了事务的对象
            </summary>
            <param name="entity"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Update(`0,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            更新实体对象的动态实例方法，CommonDB 可以是开启了事务的对象
            </summary>
            <param name="entity">实体对象</param>
            <param name="db">数据库对象</param>
            <returns>返回操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Insert(`0,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            插入实体对象的动态实例方法，CommonDB 可以是开启了事务的对象
            </summary>
            <param name="entity">实体类对象</param>
            <param name="db">数据库对象</param>
            <returns>返回操作受影响的行数</returns>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityQuery`1.Instance">
            <summary>
            获取实体查询对象的实例
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityQuery`1.DefaultDataBase">
            <summary>
            获取或者设置默认的数据库操作对象，如果未设置将采用默认的配置进行实例化数据库操作对象。
            支持读写分离模式
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityQuery`1.DefaultNewDataBase">
            <summary>
            获取当期类设定的数据连接对象，与DefaultDataBase 属性不同的是，如果未设置过 DefaultDataBase，
            则使用MyDB.GetDBHelper() 获得一个新的默认配置的数据访问对象实例；
            如果设置过，则使用 DefaultDataBase 设置的数据访问对象。
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityQuery`1.CurrentEntity">
            <summary>
            当前操作的实体类
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityQuery">
            <summary>
            实体类查询，主要用于动态生成的实体类进行查询。如果是明确定义的实体类，推荐使用EntityQuery 的泛型类
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.IEntityQuery">
            <summary>
            实体类查询接口
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.#ctor(PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            采用一个数据库操作对象实例初始化本类
            </summary>
            <param name="db">数据库操作对象实例</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.#ctor(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            使用一个实体类初始化本类，将探测数据库中是否存在本实体类对应的记录（为提高效率，建议使用另外一个重载）
            </summary>
            <param name="entity">实体类</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.#ctor(PWMIS.DataMap.Entity.EntityBase,System.Boolean)">
            <summary>
            使用一个实体类初始化本类，并指明该实体类持久化时新增还是修改
            </summary>
            <param name="entity">实体类</param>
            <param name="newEntity">是否是新实体</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.ExecuteOql(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
             执行一个不返回结果集的OQL查询表达式，例如更新，删除实体类的操作。使用自定义的数据访问对象进行操作
            </summary>
            <param name="oql"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.QueryList``1(System.Data.IDataReader)">
            <summary>
            万能根据数据阅读器对象，将结果查询到（实体）对象集合(注意查询完毕将自动释放该阅读器对象)
            </summary>
            <typeparam name="T">元素类型，可以是EntityBase,IReadData 派生类型，其它接口类型，或者POCO类型的对象</typeparam>
            <param name="reader">数据阅读器对象</param>
            <returns>实体类集合</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.QueryList``1(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            查询实体类集合。如果开启了分页且OQL设置的记录总数为0，直接返回空集合。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="oql"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.Delete(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            删除一个实体类
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.Delete(System.Collections.Generic.List{PWMIS.DataMap.Entity.EntityBase})">
            <summary>
            删除一个实体类集合
            </summary>
            <param name="entityList"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.Delete(PWMIS.DataMap.Entity.EntityBase,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            用指定的数据访问对象，来删除一个实体类的数据
            </summary>
            <param name="entity"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.ExecuteOql(PWMIS.DataMap.Entity.OQL)">
            <summary>
            执行OQL查询
            </summary>
            <param name="oql"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.ExistsEntity(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            检测实体类是否在数据库存在
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.FillEntity(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            填充实体对象，必须有主键值才可以填充成功
            </summary>
            <param name="entity">实体对象实例，必须为主键字段属性设置值</param>
            <returns>返回填充是否成功</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.Insert(System.Collections.Generic.List{PWMIS.DataMap.Entity.EntityBase})">
            <summary>
            插入一组实体类到数据库（内部使用事物）
            </summary>
            <param name="entityList"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.Insert(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            插入一个实体类的数据
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.Insert(PWMIS.DataMap.Entity.EntityBase,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            使用指定的数据访问对象，插入实体类数据
            </summary>
            <param name="entity"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.Save(PWMIS.DataProvider.Data.CommonDB,System.Object[])">
            <summary>
            使用指定的数据访问对象，将实体类指定的属性的数据保存到数据库
            </summary>
            <param name="db">数据访问对象</param>
            <param name="fields">实体类指定的属性</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.Save(System.Object[])">
            <summary>
            将实体类指定的属性的数据保存到数据库
            </summary>
            <param name="fields">实体类指定的属性</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.SaveAllChanges">
            <summary>
            保存自实体类申明以来，所有做过的修改到数据库。
            </summary>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.SaveAllChanges(PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            保存自实体类申明以来，所有做过的修改到数据库。
            </summary>
            <param name="db">数据库访问对象实例</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.Update(System.Collections.Generic.List{PWMIS.DataMap.Entity.EntityBase})">
            <summary>
            更新一个实体类集合（内部采用事务方式）
            </summary>
            <param name="entityList">实体类集合</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.Update(PWMIS.DataMap.Entity.EntityBase,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            更新一个实体类
            </summary>
            <param name="entity"></param>
            <param name="db">指定的数据访问对象</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery.Update(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            更新一个实体类
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityQuery.DefaultDataBase">
            <summary>
            获取或者设置默认的数据库操作对象，如果未设置将采用默认的配置进行实例化数据库操作对象。
            支持读写分离模式
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityQuery.DefaultNewDataBase">
            <summary>
            获取当期类设定的数据连接对象，与DefaultDataBase 属性不同的是，如果未设置过 DefaultDataBase，
            则使用MyDB.GetDBHelper() 获得一个新的默认配置的数据访问对象实例；
            如果设置过，则使用 DefaultDataBase 设置的数据访问对象。
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityQueryAnonymous">
            <summary>
            匿名实体类查询，在只知道实体类类型但没有直接的实体类实例的情况下很有用
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.ImportData(System.Collections.Generic.List{PWMIS.DataMap.Entity.EntityBase},System.Int32)">
            <summary>
            将实体集合中的所有数据导入数据库，如果数据已经存在则修改（先删除再插入）否则直接插入。如果实体中的数据只包含部分字段的数据，请勿使用该方法。
            </summary>
            <param name="entityList">同一实体类集合</param>
            <param name="bulkCopyModel">是否使用批量插入的方式更新，只支持SQLSERVER。
            取值含义：0，不使用批量复制，1，批量复制前删除数据库中对应的重复记录，2，不检查重复，直接批量插入
            </param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.GetTargetFields(System.String,System.String[],PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            获取目标数据库表中的实际字段名称列表，目标库的字段可能跟实体类定义的字段数量不一样
            </summary>
            <param name="tableName"></param>
            <param name="PropertyNames"></param>
            <param name="DB"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.ImportDataInner(System.Collections.Generic.List{PWMIS.DataMap.Entity.EntityBase},PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            将实体集合中的所有数据导入数据库，如果数据已经存在则修改（先删除再插入）否则直接插入。如果实体中的数据只包含部分字段的数据，请勿使用该方法。
            </summary>
            <param name="entityList">同一实体类集合</param>
            <param name="DB">数据访问对象实例</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.ParseInsertOrUpdateCount(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            解析更新或者修改的条数
            </summary>
            <param name="allCount">InsertOrUpdate 方法取得的总条数</param>
            <param name="listCount">记录的总条数</param>
            <param name="insertCount">插入的条数</param>
            <param name="updateCount">修改的条数</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.InsertOrUpdate(System.Collections.Generic.List{PWMIS.DataMap.Entity.EntityBase})">
            <summary>
            将实体类集合中实体类的数据插入或者修改到数据库中，适用于更新数据，如果需要大批量导入数据，请考虑使用 ImportData 方法。
            </summary>
            <param name="entityList">实体类集合</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.QueryList(PWMIS.DataMap.Entity.OQL,System.Type)">
            <summary>
            根据实体查询表达式对象，查询实体对象集合
            </summary>
            <param name="oql">实体对象查询表达式</param>
            <param name="factEntityType">具体实体类的类型</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.QueryList(System.Data.IDataReader,System.Type)">
            <summary>
            根据数据阅读器对象，查询实体对象集合(注意查询完毕将自动释放该阅读器对象)
            </summary>
            <param name="reader">数据阅读器对象</param>
            <param name="factEntityType">具体实体类的类型</param>
            <returns>实体类集合</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.QueryList(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper,System.Type)">
            <summary>
            根据实体查询表达式对象，和当前数据库操作对象，查询实体对象集合
            </summary>
            <param name="oql">实体查询表达式对象</param>
            <param name="db">数据库操作对象</param>
            <param name="factEntityType">实体类的实际类型</param>
            <returns>实体对象集合</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.ExecuteDataReader(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper,System.Type)">
            <summary>
            根据OQL查询数据获得DataReader
            </summary>
            <param name="oql">OQL表达式</param>
            <param name="db">当前数据库访问对象</param>
            <param name="factEntityType">实体类类型</param>
            <returns>DataReader</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.FindFieldNameInSql(System.String,System.String,System.String)">
            <summary>
            寻找SQL语句中参数名对应的字段名称
            </summary>
            <param name="sql"></param>
            <param name="paraName"></param>
            <param name="paraChar"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.ExecuteDataReader(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper,System.Type,System.Boolean)">
            <summary>
             根据OQL查询数据获得DataReader。如果指定single=真，将执行优化的查询以获取单条记录
            </summary>
            <param name="oql">OQL表达式</param>
            <param name="db">当前数据库访问对象</param>
            <param name="factEntityType">实体类类型</param>
            <param name="single">是否只查询一条记录</param>
            <returns>DataReader</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.ExecuteDataReader(PWMIS.Common.SqlInfo,PWMIS.DataProvider.Data.AdoHelper,System.Boolean)">
            <summary>
            使用SQL查询命令信息 执行数据阅读器查询。注意，查询单行数据不支持存储过程。
            </summary>
            <param name="si">SQL查询命令信息</param>
            <param name="db">数据访问对象</param>
            <param name="single">是否仅查询单行数据</param>
            <returns>数据阅读器</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.GetMapSql(System.Type)">
            <summary>
            根据EntityMapSql的全名称 "名称空间名字.SQL名字" 获取映射的SQL语句
            </summary>
            <param name="entityType">根据当前实体类所在程序集，获取其中的嵌入式EntityMapSql 文件</param>
            <returns>映射的SQL语句</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.ExecuteScalar(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            执行返回单值的查询，通常用于OQL的Count,Max等查询
            </summary>
            <param name="oql">查询表达式</param>
            <param name="db">数据访问对象</param>
            <returns>单值</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.ExecuteOQLCount(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            执行OQL查询，统计该查询对应的记录数量（一般用于分页前使用，某些方法会自动调用该方法，请注意方法说明）
            </summary>
            <param name="oql"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.ExecuteDataList``1(System.Data.IDataReader)">
            <summary>
            执行返回列表数据的查询
            </summary>
            <typeparam name="T">实体类型，支持普通的POCO实体类，仅需实现IReadData 接口</typeparam>
            <param name="reader">数据阅读器</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.EntitysToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            将实体类转换成数据表
            </summary>
            <typeparam name="Entity">实体类类型</typeparam>
            <param name="entitys">实际的实体类</param>
            <returns>数据表</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.GetParameters(System.Collections.Generic.Dictionary{System.String,PWMIS.DataMap.Entity.TableNameField},PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            将字典形式的参数数据，转换成数据库格式的参数素组
            </summary>
            <param name="dictPara"></param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityQueryAnonymous.DefaultDataBase">
            <summary>
            操作需要的数据库实例，如果不设定将采用默认实例
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityQueryAnonymous.DefaultNewDataBase">
            <summary>
            获取当期类设定的数据连接对象，与DefaultDataBase 属性不同的是，如果未设置过 DefaultDataBase，
            则使用MyDB.GetDBHelper() 获得一个新的默认配置的数据访问对象实例；
            如果设置过，则使用 DefaultDataBase 设置的数据访问对象。
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntitySerializable.PropertyList(System.String)">
            <summary>
            获取属性列的值
            </summary>
            <param name="propertyName">属性字段名称</param>
            <returns>属性值</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntitySerializable.getProperty(System.String,System.TypeCode)">
            <summary>
            获取属性值
            </summary>
            <param name="propertyName">属性字段名称</param>
            <param name="t">属性类型代码</param>
            <returns>属性值</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntitySerializable.getProperty``1(System.String)">
            <summary>
            获取属性值
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="propertyName">属性名称</param>
            <returns>属性值</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntitySerializable.setProperty(System.String,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="propertyName">属性字段名称</param>
            <param name="Value">属性值</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntitySerializable.setProperty(System.String,System.String,System.Int32)">
            <summary>
            设置属性，如果值是字符类型且设置了最大长度大于0，那么不允许设置大于此长度的字符串
            </summary>
            <param name="name">字段名称</param>
            <param name="Value">值</param>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.GOQL`1.Limit(System.Int32,System.Int32)">
            <summary>
            以每页不超过 pageSize 条记录，查询第 pageNumber 页的数据
            </summary>
            <param name="pageSize">每页显示的记录数量</param>
            <param name="pageNumber">所在页页码，从1开始</param>
            <returns>GOQL对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.GOQL`1.Limit(System.Int32,System.Int32,System.Int32)">
            <summary>
            以每页不超过 pageSize 条记录，查询第 pageNumber 页的数据。如果没有指定排序方法，可以不指定记录总数，
            但不可指定为0，或者使用另外一个重载。
            </summary>
            <param name="pageSize">每页显示的记录数量</param>
            <param name="pageNumber">所在页页码，从1开始</param>
            <param name="allCount">记录总数</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.GOQL`1.With(PWMIS.DataMap.Entity.OQL.SqlServerLock)">
            <summary>
            提供查询的锁限定(注意:只支持SQLSERVER)(注:本方法由网友 唔 提供)
            </summary>
            <param name="lockname"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.GOQL`1.MapToPOCOList``1(PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            将查询结果映射到另外的具有同名属性的类型，比如DTO对象
            </summary>
            <typeparam name="T1">DTO对象的类型</typeparam>
            <param name="db">AdoHelper</param>
            <returns>DTO对象列表</returns>
        </member>
        <member name="T:PWMIS.DataMap.Entity.OQLCacheFunc">
            <summary>
            获取OQL缓存的委托函数
            </summary>
            <param name="paraValueObject">构造OQL对象所需要的参数值的对象，比如一个实体类</param>
            <returns>OQL</returns>
        </member>
        <member name="T:PWMIS.DataMap.Entity.OQLOrderAction">
            <summary>
            OQL排序的委托方法，用于指定排序的对象
            </summary>
            <param name="order">OQL排序对象</param>
        </member>
        <member name="T:PWMIS.DataMap.Entity.TableNameField">
            <summary>
            表名称字段类型。OQL内部使用
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.TableNameField.Field">
            <summary>
            原始字段名
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.TableNameField.Entity">
            <summary>
            关联的实体类
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.TableNameField.Index">
            <summary>
            在一系列字段使用中的索引号
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.TableNameField.FieldValue">
            <summary>
            字段对应的值
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.TableNameField.Name">
            <summary>
            获取表名称
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.TableNameField.SqlFieldName">
            <summary>
            在ＳＱＬ语句中使用的字段名
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.OQL">
            <summary>
            PDF.NET ORM Query Language,实体对象查询表达式
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.TopCount">
            <summary>
            查询前N条记录，目前仅支持Access/SqlServer，其它数据库可以使用Limit(N) 方法替代。
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.PageEnable">
            <summary>
            是否开启分页功能，如果启用，OQL不能设定“排序”信息，分页标识字段将作为排序字段
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.PageSize">
            <summary>
            分页时候每页的记录大小，默认为10
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.PageNumber">
            <summary>
            分页时候的当前页码，默认为1
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.PageField">
            <summary>
            分页时候的记录标识字段，默认为主键字段。不支持多主键。
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.PageOrderDesc">
            <summary>
            分页的时候记录按照倒序排序（对Oracle数据库不起效）
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.PageWithAllRecordCount">
            <summary>
            分页的时候，记录的总数量，如未设置虚拟为999条。如需准确分页，应设置该值。
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.Distinct">
            <summary>
            是否排除重复记录
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Limit(System.Int32)">
            <summary>
            限制查询的记录数量，对于SQLSERVER/ACCESS，将采用主键作为标识的高速分页方式。
            注：调用该方法不会影响生OQL.ToString()结果，仅在最终执行查询的时候才会去构造当前特点数据库的SQL语句。
            </summary>
            <param name="pageSize">页大小</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Limit(System.Int32,System.Int32)">
            <summary>
            限制查询的记录数量，对于SQLSERVER/ACCESS，将采用主键作为标识的高速分页方式。
            注：调用该方法不会影响生OQL.ToString()结果，仅在最终执行查询的时候才会去构造当前特点数据库的SQL语句。
            </summary>
            <param name="pageSize">页大小</param>
            <param name="pageNumber">页号码</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Limit(System.Int32,System.Int32,System.Boolean)">
            <summary>
            限制查询的记录数量，对于SQLSERVER/ACCESS，将采用主键作为标识的高速分页方式。
            注：调用该方法不会影响生OQL.ToString()结果，仅在最终执行查询的时候才会去构造当前特点数据库的SQL语句。
            </summary>
            <param name="pageSize">页大小</param>
            <param name="pageNumber">页号码</param>
            <param name="autoRecCount">是否允许自动查询本次分页查询前的记录总数，
            如果允许，那么查询成功后可以从OQL对象的PageWithAllRecordCount 字段得到实际的记录数量</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Limit(System.Int32,System.Int32,System.String)">
            <summary>
            限制查询的记录数量，对于SQLSERVER/ACCESS，将采用指定字段作为标识的高速分页方式。
            注：调用该方法不会影响生OQL.ToString()结果，仅在最终执行查询的时候才会去构造当前特点数据库的SQL语句。
            </summary>
            <param name="pageSize">页大小</param>
            <param name="pageNumber">页号码</param>
            <param name="pageField">要排序的字段</param>
            <returns></returns>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.currEntity">
            <summary>
            当前实体类
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.haveJoinOpt">
            <summary>
            是否已经发生了连接操作
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.haveOrderBy">
            <summary>
            是否有排序操作
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.sql_fields">
            <summary>
            SQL选择的字段
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.sql_table">
            <summary>
            查询对应的表
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.sql_condition">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.haveChildOql">
            <summary>
            是否具有子查询
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.oqlString">
            <summary>
            Where之后的OQL字符串
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.fieldStack">
            <summary>
            字段堆栈
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.sqlFunctionString">
            <summary>
            SQL 函数
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.GetMapSQL(System.String)">
            <summary>
            根据用户自定义的查询（临时视图），从该查询进一步获取指定的记录的查询语句
            </summary>
            <param name="tempViewSql">作为子表的用户查询（临时视图）</param>
            <returns>符合当前限定条件的查询语句</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.GetOqlFieldName(PWMIS.DataMap.Entity.TableNameField)">
            <summary>
            获取OQL使用的字段名
            </summary>
            <param name="tnf"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.GetTableAliases(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            获取表的别名
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.TakeStackFields">
            <summary>
            从堆栈上取一个以逗号间隔字段名数组字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.TakeOneStackFields">
            <summary>
            从堆栈上只取一个字段名
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.TakeTwoStackFields``1(``0,PWMIS.DataMap.Entity.TableNameField@,PWMIS.DataMap.Entity.TableNameField@)">
            <summary>
            从堆栈上获取2个字段信息，可能只获取到一个字段信息并自动判断字段是左还是右
            </summary>
            <typeparam name="T">属性字段的类型</typeparam>
            <param name="leftParaValue">左边参数的值</param>
            <param name="leftField">输出的左字段</param>
            <param name="rightField">输出的右字段</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.CreateParameter(PWMIS.DataMap.Entity.TableNameField)">
            <summary>
            使用当前参数值，创建一个参数名，并将参数的值放到当前对象的参数字典中去
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.GetUsedEntity``1">
            <summary>
            获取当前OQL对象正在使用的实体类
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Select(System.Object[])">
            <summary>
            选取要调用的实体类属性字段。该方法可以在OQL实例对象上多次调用
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Select(System.Boolean,System.Object[])">
            <summary>
            使用是否排除重复记录的方式，来选取实体对象的属性
            <remarks>2014.1.6  网友※DS 调用本方法的时候，发现调用的第一个实体类属性是bool类型，
            引起少了一个字段查询的问题 </remarks>
            </summary>
            <param name="distinct"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Update(System.Object[])">
            <summary>
            更新实体类的某些属性值，如果未指定条件，则使用主键值为条件。
            </summary>
            <param name="fields">实体熟悉列表</param>
            <returns>条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.UpdateSelf(System.Char,System.Object[])">
            <summary>
            执行自操作的字段更新，比如为某一个数值性字段执行累加
            </summary>
            <param name="selfOptChar">自操作类型，有+，-，*，/ 四种类型</param>
            <param name="fields">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Delete">
            <summary>
            删除实体类，如果未指定条件，则使用主键值为条件。
            </summary>
            <returns>条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.From(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            以一个实体类实例对象初始化OQL对象。
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.FromObject``1">
            <summary>
            直接返回查询所有数据的泛型OQL表达式
            <example>
            <code>
            <![CDATA[
              List<User> users=OQL.From<User>.ToList();
            ]]>
            </code>
            </example>
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <returns>OQL表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.From``1">
            <summary>
            直接返回查询所有数据的OQL表达式
            <example>
            <code>
            <![CDATA[
              List<User> users=OQL.From<User>.ToList<User>();
            ]]>
            </code>
            </example>
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <returns>OQL表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Join(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            内连接查询
            </summary>
            <param name="e">要连接的实体对象</param>
            <returns>连接对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.InnerJoin(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            内连接查询
            </summary>
            <param name="e">要连接的实体对象</param>
            <returns>连接对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.LeftJoin(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            左连接查询
            </summary>
            <param name="e">要连接的实体对象</param>
            <returns>连接对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.RightJoin(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            右连接查询
            </summary>
            <param name="e">要连接的实体对象</param>
            <returns>连接对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.GetWhereString">
            <summary>
            获取条件字符串，如果未限定条件，则使用主键的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Dispose">
            <summary>
            释放实体类事件挂钩。如果没页手工调用，该方法会在EntityQuery 调用
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.With(PWMIS.DataMap.Entity.OQL.SqlServerLock)">
            <summary>
            制定实体查询的时候表的锁定类型。仅支持SqlServer。
            </summary>
            <param name="lockType"></param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQL.GroupbyFieldNames">
            <summary>
            分组字段名
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQL.Parameters">
            <summary>
            获取条件参数
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQL.EntityMap">
            <summary>
            实体类映射的类型
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQL.InitParameters">
            <summary>
            要初始化的的参数值，用于自定义查询的实体类
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQL.Condition">
            <summary>
            获取当前条件比较对象
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQL.SelectStar">
            <summary>
            如果未选择任何列，生成的SQL语句Select 后面是否用 * 代替。
            用于不想修改实体类结构但又想增加表字段的情况。
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.OQL.SqlServerLock">
            <summary>
            SqlServer上的锁类型枚举。请注意，OQL应用这个枚举之后将只能在SqlServer上面使用。
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.SqlServerLock.HOLDLOCK">
            <summary>
            在该表上保持共享锁，直到整个事务结束，而不是在语句执行完立即释放所添加的锁。
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.SqlServerLock.NOLOCK">
            <summary>
            不添加共享锁和排它锁，当这个选项生效后，可能读到未提交读的数据或“脏数据”，这个选项仅仅应用于SELECT语句
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.SqlServerLock.PAGLOCK">
            <summary>
            指定添加页锁（否则通常可能添加表锁）
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.SqlServerLock.READCOMMITTED">
            <summary>
            用与运行在提交读隔离级别的事务相同的锁语义执行扫描。默认情况下，SQL Server 2000 在此隔离级别上操作
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.SqlServerLock.READPAST">
            <summary>
            跳过已经加锁的数据行，这个选项将使事务读取数据时跳过那些已经被其他事务锁定的数据行，而不是阻塞直到其他事务释放锁，READPAST仅仅应用于READ COMMITTED隔离性级别下事务操作中的SELECT语句操作
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.SqlServerLock.READUNCOMMITTED">
            <summary>
            等同于NOLOCK
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.SqlServerLock.REPEATABLEREAD">
            <summary>
            设置事务为可重复读隔离性级别
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.SqlServerLock.ROWLOCK">
            <summary>
            使用行级锁，而不使用粒度更粗的页级锁和表级锁
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.SqlServerLock.SERIALIZABLE">
            <summary>
            用与运行在可串行读隔离级别的事务相同的锁语义执行扫描。等同于 HOLDLOCK。
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.SqlServerLock.TABLOCK">
            <summary>
            指定使用表级锁，而不是使用行级或页面级的锁，SQL Server在该语句执行完后释放这个锁，而如果同时指定了HOLDLOCK，该锁一直保持到这个事务结束
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.SqlServerLock.TABLOCKX">
            <summary>
            指定在表上使用排它锁，这个锁可以阻止其他事务读或更新这个表的数据，直到这个语句或整个事务结束
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.SqlServerLock.UPDLOCK">
            <summary>
            指定在读表中数据时设置更新 锁（update lock）而不是设置共享锁，该锁一直保持到这个语句或整个事务结束，使用UPDLOCK的作用是允许用户先读取数据（而且不阻塞其他用户读数据），并且保证在后来再更新数据时，这一段时间内这些数据没有被其他用户修改
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.SqlServerLock.UNKNOW">
            <summary>
            未知（OQL默认）
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL4.OrderBy(System.String[])">
            <summary>
            （网友[有事M我]、[左眼]提供）根据传入的实体类的多个属性的排序信息，从而进行动态的排序；
            适用于不能在OQL表达式里面直接指明排序方式的场景（比如需要从前台传入）。
            </summary>
            <param name="orderStr">排序数组，形如{"ID desc","Name asc"}</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.Where(PWMIS.DataMap.Entity.QueryParameter[])">
            <summary>
            根据传入的查询参数数组，对字段名执行不区分大小写的比较，生成查询条件。
            注意目前要求QueryParameter 用的是要查询的表的字段名称，而不是实体类的属性名称
            </summary>
            <param name="queryParas">查询参数数组</param>
            <returns>条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.Where(System.Object[])">
            <summary>
            使用实体类选定的属性作为查询条件和条件的值，必须有至少一个参数。该方法不可以多次调用。
            如果想构造动态的查询条件，请使用OQLCompare 对象
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.Count(System.Object,System.String)">
            <summary>
            OQL1表达式之统计数量，请在结果实体类中使用PropertyList["字段别名"] 的方式获取查询值
            </summary>
            <param name="field">属性字段</param>
            <param name="asFieldName">别名，如果不指定，则使用字段名称</param>
            <returns>OQL1</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.Max(System.Object,System.String)">
            <summary>
            OQL1表达式之求最大值，请在结果实体类中使用PropertyList["字段别名"] 的方式获取查询值
            </summary>
            <param name="field">属性字段</param>
            <param name="asFieldName">别名，如果不指定，则使用字段名称</param>
            <returns>OQL1</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.Min(System.Object,System.String)">
            <summary>
            OQL1表达式之求最小值，请在结果实体类中使用PropertyList["字段别名"] 的方式获取查询值
            </summary>
            <param name="field">属性字段</param>
            <param name="asFieldName">别名，如果不指定，则使用字段名称</param>
            <returns>OQL1</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.Sum(System.Object,System.String)">
            <summary>
            OQL1表达式之求合计，请在结果实体类中使用PropertyList["字段别名"] 的方式获取查询值
            </summary>
            <param name="field">属性字段</param>
            <param name="asFieldName">别名，如果不指定，则使用字段名称</param>
            <returns>OQL1</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.Avg(System.Object,System.String)">
            <summary>
            OQL1表达式之求平均，请在结果实体类中使用PropertyList["字段别名"] 的方式获取查询值
            </summary>
            <param name="field">属性字段</param>
            <param name="asFieldName">字段别名，如果不指定，则使用字段名称</param>
            <returns>OQL1</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.JoinEntity.#ctor(PWMIS.DataMap.Entity.OQL,PWMIS.DataMap.Entity.EntityBase,System.String)">
            <summary>
            以一个OQL对象关联本类
            </summary>
            <param name="mainOql"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.JoinEntity.On(System.Object,System.Object)">
            <summary>
            指定要关联查询的实体类属性（内部对应字段）
            </summary>
            <param name="field1">主实体类的主键属性</param>
            <param name="field2">从实体类的外键属性</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.JoinEntity.AddJoinFieldName(System.String)">
            <summary>
            （OQL内部使用）添加要关联的字段名
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="T:PWMIS.DataMap.Entity.OQLCondition">
            <summary>
            OQL 条件对象，兼容老版本的OQL2对象。建议使用OQLCompare对象构造复杂的条件
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCondition.AND(System.Object,System.String,System.Object)">
            <summary>
            选取 与 条件
            </summary>
            <param name="field">实体对象的属性</param>
            <param name="compareType">SQL 比较条件，如"=","LIKE","IS" 等</param>
            <param name="Value">要比较的值</param>
            <returns>多条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCondition.OR(System.Object,System.String,System.Object)">
            <summary>
            选取 或 条件
            </summary>
            <param name="field">实体对象的属性</param>
            <param name="compareType">SQL 比较条件，如"=","LIKE","IS" 等</param>
            <param name="Value">要比较的值</param>
            <returns>多条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCondition.NOT(System.Object,System.String,System.Object)">
            <summary>
            选取 非 条件
            </summary>
            <param name="field">实体对象的属性</param>
            <param name="compareType">SQL 比较条件，如"=","LIKE","IS" 等</param>
            <param name="Value">要比较的值</param>
            <returns>多条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCondition.IN(System.Object,System.Object[])">
            <summary>
            选取 字段 列表条件
            </summary>
            <param name="field">实体对象的属性</param>
            <param name="Values">值列表</param>
            <returns>条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCondition.NotIn(System.Object,System.Object[])">
            <summary>
            构造Not In查询条件
            </summary>
            <param name="field">字段</param>
            <param name="Values">值数组</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCondition.IN(System.Object,PWMIS.DataMap.Entity.OQL)">
            <summary>
            以另外一个OQL条件作为In的子查询
            </summary>
            <seealso cref="!:http://www.cnblogs.com/bluedoctor/archive/2011/02/24/1963606.html"/>
            <param name="field">属性字段</param>
            <param name="q">OQL表达式</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCondition.NotIn(System.Object,PWMIS.DataMap.Entity.OQL)">
            <summary>
            以另外一个OQL条件作为Not In的子查询
            </summary>
            <seealso cref="!:http://www.cnblogs.com/bluedoctor/archive/2011/02/24/1963606.html"/>
            <param name="field">属性字段</param>
            <param name="q">OQL表达式</param>
            <returns></returns>
        </member>
        <member name="T:PWMIS.DataMap.Entity.OQLOrder">
            <summary>
            OQL 动态排序对象，用于OQL表达式的OrderBy参数
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLOrder.#ctor(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            以一个实体类对象初始化构造函数
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLOrder.#ctor(PWMIS.DataMap.Entity.EntityBase,PWMIS.DataMap.Entity.EntityBase[])">
            <summary>
            以一个或者多个实体类，来构造排序条件类。在OQL多实体类关联查询中需要使用该方法。
            </summary>
            <param name="e"></param>
            <param name="joinedEntitys"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLOrder.OrderBy(System.Object)">
            <summary>
            默认排序（ASC）
            </summary>
            <param name="field">要排序的实体属性</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLOrder.Asc(System.Object)">
            <summary>
            升序排序ASC
            </summary>
            <param name="field">要排序的实体属性</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLOrder.Desc(System.Object)">
            <summary>
            倒序排序DESC
            </summary>
            <param name="field">要排序的实体属性</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLOrder.ReSet">
            <summary>
            重置排序状态
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLOrder.ToString">
            <summary>
            获取排序信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQLOrder.OrderByString">
            <summary>
            获取排序字符串，OQL内部使用
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.OQLCompare">
            <summary>
            实体对象条件比较类，用于复杂条件比较表达式
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.#ctor(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            使用一个实体对象初始化本类。该方法已经过时，请使用其它构造函数
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.#ctor(PWMIS.DataMap.Entity.EntityBase,PWMIS.DataMap.Entity.EntityBase[])">
            <summary>
            使用多个实体类进行连接查询的条件。该方法已经过时，请使用其它构造函数
            </summary>
            <param name="e"></param>
            <param name="joinedEntitys"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.#ctor(PWMIS.DataMap.Entity.OQLCompare,PWMIS.DataMap.Entity.OQLCompare.CompareLogic,PWMIS.DataMap.Entity.OQLCompare)">
            <summary>
            采用两个实体比较对象按照某种比较逻辑进行处理，构造一个新的实体比较对象
            </summary>
            <seealso cref="!:http://www.cnblogs.com/bluedoctor/archive/2010/11/28/1870095.html"/>
            <param name="compare1">比较逻辑符号左边的实体比较对象</param>
            <param name="logic">比较逻辑</param>
            <param name="compare2">比较逻辑符号左边的实体比较对象</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Not(PWMIS.DataMap.Entity.OQLCompare)">
            <summary>
            对条件表达式取反
            </summary>
            <param name="cmp"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.GetNewParameterName">
            <summary>
            获取一个新的参数名称。方法已经过时
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Equals(System.Object)">
            <summary>
            判断两个OQLCompare 是否是同一个对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Comparer(System.Collections.Generic.List{PWMIS.DataMap.Entity.OQLCompare},PWMIS.DataMap.Entity.OQLCompare.CompareLogic)">
            <summary>
            对一组OQLCompare 对象，执行CompareLogic 类型的比较，通常用于构造复杂的带括号的条件查询
            </summary>
            <seealso cref="!:http://www.cnblogs.com/bluedoctor/archive/2011/02/24/1963606.html"/>
            <param name="compares">OQL比较对象列表</param>
            <param name="logic">各组比较条件的组合方式，And，Or，Not</param>
            <returns>新的条件比较对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Comparer``1(``0,PWMIS.DataMap.Entity.OQLCompare.CompareType,``0)">
            <summary>
            将当前实体属性的值和要比较的值进行比较，得到一个新的实体比较对象
            </summary>
            <param name="field">实体对象属性</param>
            <param name="type">比较类型枚举</param>
            <param name="Value">要比较的值</param>
            <returns>比较表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Comparer``1(``0,PWMIS.DataMap.Entity.OQLCompare.CompareType,``0,System.String)">
            <summary>
            将当前实体属性的值和要比较的值进行比较，得到一个新的实体比较对象
            </summary>
            <param name="field">实体对象属性</param>
            <param name="type">比较类型枚举</param>
            <param name="Value">要比较的值</param>
            <param name="sqlFunctionFormat">SQL 函数格式串，例如 "DATEPART(hh, {0})"</param>
            <returns>比较表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Comparer``1(``0,System.String,``0)">
            <summary>
            将当前实体属性的值和要比较的值进行比较，得到一个新的实体比较对象
            </summary>
            <param name="field">实体对象属性</param>
            <param name="compareTypeString">数据库比较类型字符串</param>
            <param name="Value">要比较的值</param>
            <returns>比较表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Comparer``1(``0,System.String,``0,System.String)">
            <summary>
            将当前实体属性的值和要比较的值进行比较，得到一个新的实体比较对象
            </summary>
            <param name="field">实体对象属性</param>
            <param name="cmpTypeString">数据库比较类型字符串</param>
            <param name="Value">要比较的值</param>
            <param name="sqlFunctionFormat">SQL 函数格式串，例如 "DATEPART(hh, {0})"</param>
            <returns>比较表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.EqualValue(System.Object)">
            <summary>
            将当前实体属性的值作为比较的值，得到一个新的实体比较对象
            </summary>
            <param name="field">实体对象的属性字段</param>
            <returns>比较表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.IsNull(System.Object)">
            <summary>
            判断指定字段条件为空 Is NULL
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.IsNotNull(System.Object)">
            <summary>
            判断指定字段条件为空 Is Not NULL
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Between``1(``0,``0,``0)">
            <summary>
            指定条件的包含范围
            </summary>
            <typeparam name="T">属性字段的类型</typeparam>
            <param name="field">属性字段</param>
            <param name="beginValue">起始值</param>
            <param name="endValue">结束值</param>
            <returns>比较对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Property(System.Object)">
            <summary>
            根据实体对象的属性，获取新的条件比较对象，用于比较操作符重载
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.op_BitwiseAnd(PWMIS.DataMap.Entity.OQLCompare,PWMIS.DataMap.Entity.OQLCompare)">
            <summary>
            将两个实体比较对象进行逻辑 与 比较，得到一个新的实体比较表达式
            </summary>
            <param name="compare1">左表达式</param>
            <param name="compare2">右表达式</param>
            <returns>实体比较表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.op_BitwiseOr(PWMIS.DataMap.Entity.OQLCompare,PWMIS.DataMap.Entity.OQLCompare)">
            <summary>
            将两个实体比较对象进行逻辑 与 比较，得到一个新的实体比较表达式
            </summary>
            <param name="compare1">左表达式</param>
            <param name="compare2">右表达式</param>
            <returns>实体比较表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.op_Equality(PWMIS.DataMap.Entity.OQLCompare,System.Object)">
            <summary>
            设置等于某个实体属性的比较条件
            </summary>
            <param name="compare">当前实体比较对象</param>
            <param name="Value">要比较的值</param>
            <returns>构造的实体比较对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.op_Inequality(PWMIS.DataMap.Entity.OQLCompare,System.Object)">
            <summary>
            设置不等于某个实体属性的比较条件
            </summary>
            <param name="compare">当前实体比较对象</param>
            <param name="Value">要比较的值</param>
            <returns>构造的实体比较对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.op_GreaterThanOrEqual(PWMIS.DataMap.Entity.OQLCompare,System.Object)">
            <summary>
            设置不小于某个实体属性的比较条件
            </summary>
            <param name="compare">当前实体比较对象</param>
            <param name="Value">要比较的值</param>
            <returns>构造的实体比较对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.op_LessThanOrEqual(PWMIS.DataMap.Entity.OQLCompare,System.Object)">
            <summary>
            设置不大于某个实体属性的比较条件
            </summary>
            <param name="compare">当前实体比较对象</param>
            <param name="Value">要比较的值</param>
            <returns>构造的实体比较对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.op_GreaterThan(PWMIS.DataMap.Entity.OQLCompare,System.Object)">
            <summary>
            设置大于某个实体属性的比较条件
            </summary>
            <param name="compare">当前实体比较对象</param>
            <param name="Value">要比较的值</param>
            <returns>构造的实体比较对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.op_LessThan(PWMIS.DataMap.Entity.OQLCompare,System.Object)">
            <summary>
            设置小于某个实体属性的比较条件
            </summary>
            <param name="compare">当前实体比较对象</param>
            <param name="Value">要比较的值</param>
            <returns>构造的实体比较对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.GetComparedTypeString">
            <summary>
            获取比较类型的字符串形式
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.CheckChildLogicEquals(PWMIS.DataMap.Entity.OQLCompare,PWMIS.DataMap.Entity.OQLCompare.CompareLogic)">
            <summary>
            检查子节点的逻辑类型
            </summary>
            <param name="childCmp"></param>
            <param name="currLogic"></param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQLCompare.ComparedParameters">
            <summary>
            （条件表达式）比较的参数信息表
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQLCompare.CompareString">
            <summary>
            获取比较表达式的字符串形式
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQLCompare.LinkedOQL">
            <summary>
            关联的OQL对象
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.OQLCompare.CompareType">
            <summary>
            比较类别
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.LessThanOrEqual">
            <summary>
            不大于（小于或等于）
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.LessThan">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.GreaterThanOrEqual">
            <summary>
            不小于（大于或等于）
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.Equal">
            <summary>
            相等
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.Like">
            <summary>
            类似于
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.IS">
            <summary>
            IS NULL / IS NOT NULL
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.IN">
            <summary>
            IN 查询
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.NotIn">
            <summary>
            Not In 查询
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.IsNot">
            <summary>
            IS NOT NULL
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.Between">
            <summary>
            BETWEEN 在某两个值之间
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.OQLCompare.CompareLogic">
            <summary>
            条件表达式逻辑符号
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareLogic.AND">
            <summary>
            逻辑 与
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareLogic.OR">
            <summary>
            逻辑 或
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareLogic.NOT">
            <summary>
            逻辑 非
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.PdfNetSerialize">
            <summary>
            PDF.NET 实体类序列化器
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.PdfNetSerialize.BinarySerialize(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            二进制序列化
            </summary>
            <param name="entity">实体类实例</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.PdfNetSerialize.BinaryDeserialize(System.Byte[],System.Type)">
            <summary>
            反序列化实体类
            </summary>
            <param name="buffer">要反序列化的数据源</param>
            <param name="factEntityType">实体类的实际类型</param>
            <returns>实体类实例</returns>
        </member>
        <member name="T:PWMIS.DataMap.Entity.PdfNetSerialize`1">
            <summary>
            PDF.NET 实体类序列化器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PWMIS.DataMap.Entity.PdfNetSerialize`1.BinarySerialize(`0)">
            <summary>
            二进制序列化一个实体类
            </summary>
            <param name="entity">实体对象实例</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.PdfNetSerialize`1.BinarySerialize(`0[])">
            <summary>
            二进制序列化一个实体类数组
            </summary>
            <param name="entitys"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.PdfNetSerialize`1.BinaryDeserialize(System.Byte[])">
            <summary>
            反序列化一个二进制实体类
            </summary>
            <param name="buffer">二进制实体类字节流</param>
            <returns>实体类</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.PdfNetSerialize`1.BinaryDeserializeArray(System.Byte[])">
            <summary>
            反序列化一个二进制实体类数组
            </summary>
            <param name="buffer">二进制字节缓存</param>
            <returns>实体类数组</returns>
        </member>
        <member name="T:PWMIS.DataMap.Entity.PropertyNameValues">
            <summary>
            属性名值对对象
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.PropertyNameValues.CreateEntity``1">
            <summary>
            根据当前类，构造一个新的实体类，注意当前类的属性和值必须跟要构造的实体类匹配，否则将引发异常
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <returns>实体类</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.PropertyNameValues.FillEntity(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            填充实体类
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:PWMIS.DataMap.Entity.QueryParameter">
            <summary>
            查询参数类
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.QueryParameter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.QueryParameter.#ctor(System.String,PWMIS.Common.enumCompare,System.Object)">
            <summary>
            使用参数构造本类
            </summary>
            <param name="filedName">字段名</param>
            <param name="compareType">比较类型</param>
            <param name="fieldValue">字段值</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.QueryParameter.#ctor(System.String,System.String,System.Object)">
            <summary>
            使用比较字符串构造本类
            </summary>
            <param name="filedName">字段名</param>
            <param name="compareTypeString">比较字符串，比如=，like，is 等SQL比较符号</param>
            <param name="fieldValue">要比较的值</param>
        </member>
        <member name="P:PWMIS.DataMap.Entity.QueryParameter.FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.QueryParameter.FieldValue">
            <summary>
            字段值
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.QueryParameter.CompareType">
            <summary>
            比较类型
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.QueryParameter`1">
            <summary>
            查询参数泛型类  QueryParameter;
            </summary>
            <example>
            <code>
            <![CDATA[
            //实体类 Customers
            Northwind.Customers cm = new Northwind.Customers();
            cm.Country="中国";
            ....
            
            QueryParameter<Northwind.Customers> qp = new QueryParameter<Northwind.Customers>(cm);
            
            QueryParameter para1=qp.CreatePrameter(cm.Country)
            QueryParameter para2=qp.CreatePrameter(cm.City, enumCompare.Like, "%" + txtCity.Text + "%")
            
            QueryParameter[] paras={para1,para2};
            
            OQL q = OQL.From(cm).Select().Where(queryParas).END;
            
            //获取查询结果列表
            return  EntityQuery&lt;Northwind.Customers&gt;.QueryList(q);
            ]]>
            </code>
            </example>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PWMIS.DataMap.Entity.QueryParameter`1.#ctor(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            以一个实体类初始化本类
            </summary>
            <param name="entity">实体类实例</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.QueryParameter`1.CreatePrameter(System.Object,PWMIS.Common.enumCompare,System.Object)">
            <summary>
            构造实体查询参数
            </summary>
            <param name="entityProperty">实体类的属性</param>
            <param name="compareType">要比较的类型枚举</param>
            <param name="fieldValue">要比较的值</param>
            <returns>实体查询参数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.QueryParameter`1.CreatePrameter(System.Object,PWMIS.Common.enumCompare)">
            <summary>
            构造实体查询参数，指定要比较的类型，以当前实体属性的值为比较的值。
            </summary>
            <param name="entityProperty">实体类的属性</param>
            <param name="compareType">要比较的类型枚举</param>
            <returns>实体查询参数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.QueryParameter`1.CreatePrameter(System.Object)">
            <summary>
            构造实体查询参数，将以“等于”为比较条件，以当前实体属性的值为比较的值。
            </summary>
            <param name="entityProperty">实体类的属性</param>
            <returns>实体查询参数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.QueryParameter`1.CreatePrameter(System.Object,System.String,System.Object)">
            <summary>
            构造实体查询参数
            </summary>
            <param name="entityProperty">实体类的属性</param>
            <param name="compareTypeString">要比较的SQL 条件比较字符串。</param>
            <param name="fieldValue">要比较的值</param>
            <returns>实体查询参数</returns>
        </member>
        <member name="T:PWMIS.Common.IDataControl">
            <summary>
            数据映射控件接口
            </summary>
        </member>
        <member name="M:PWMIS.Common.IDataControl.SetValue(System.Object)">
            <summary>
            设置值
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:PWMIS.Common.IDataControl.GetValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.Common.IDataControl.Validate">
            <summary>
            服务端验证
            </summary>
            <returns></returns>
        </member>
        <member name="P:PWMIS.Common.IDataControl.LinkProperty">
            <summary>
            与数据库数据项相关联的数据
            </summary>
        </member>
        <member name="P:PWMIS.Common.IDataControl.LinkObject">
            <summary>
            与数据关联的表名
            </summary>
        </member>
        <member name="P:PWMIS.Common.IDataControl.IsValid">
            <summary>
            是否通过服务器验证默认为true
            </summary>
        </member>
        <member name="P:PWMIS.Common.IDataControl.SysTypeCode">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:PWMIS.Common.IDataControl.ReadOnly">
            <summary>
            只读标记
            </summary>
        </member>
        <member name="P:PWMIS.Common.IDataControl.IsNull">
            <summary>
            是否允许空值
            </summary>
        </member>
        <member name="P:PWMIS.Common.IDataControl.PrimaryKey">
            <summary>
            是否是主键
            </summary>
        </member>
        <member name="T:PWMIS.Common.IQueryControl">
            <summary>
            数据查询控件接口
            </summary>
        </member>
        <member name="P:PWMIS.Common.IQueryControl.CompareSymbol">
            <summary>
            查询的比较符号,例如 =,>=,
            </summary>
        </member>
        <member name="P:PWMIS.Common.IQueryControl.QueryFormatString">
            <summary>
            发送到数据库查询前的字段值格式字符串
            </summary>
        </member>
        <member name="T:PWMIS.Common.IReadData">
            <summary>
            读取数据接口，以用户自定义的方式，来决定如何读取来自数据源的数据
            </summary>
        </member>
        <member name="M:PWMIS.Common.IReadData.ReadData(System.Data.IDataReader,System.Int32,System.String[])">
            <summary>
            读取数据
            </summary>
            <param name="reader">数据阅读器</param>
            <param name="fieldCount">本次字段数量</param>
            <param name="fieldNames">本次字段的名称数组</param>
        </member>
        <member name="T:PWMIS.DataMap.SqlMap.CommandInfo">
            <summary>
            命令信息，支持处理分页SQL语句
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.SqlMap.CommandInfo.PageSize">
            <summary>
            获取或者设置分页大小，默认为10
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.SqlMap.CommandInfo.PageNumber">
            <summary>
            获取或者分页的当前页码，默认为1
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.SqlMap.CommandInfo.AllCount">
            <summary>
            设置记录总数，只有该值大于零，才会启用分页功能。
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.SqlMap.CommandInfo.DataBaseType">
            <summary>
            获取或者设置数据库类型
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.CommandInfo.#ctor(PWMIS.Common.DBMSType)">
            <summary>
            使用指定的数据库类型初始化本类
            </summary>
            <param name="dbType"></param>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.CommandInfo.SetPageInfo(System.Int32[])">
            <summary>
            设置分页信息，pageInfo[ 0]=记录数量，pageInfo[ 1]=页码，pageInfo[ 2]=页大小
            </summary>
            <param name="pageInfo">分页信息数组</param>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.CommandInfo.SetParameterValue(System.String,System.Object)">
            <summary>
            给指定的参数赋值
            </summary>
            <param name="paramName"></param>
            <param name="paramValue"></param>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.CommandInfo.SetParameterValue(System.String,System.String,PWMIS.Common.enumParamType)">
            <summary>
            指定参数替换类型的参数赋值方法,paramName 不带Me.ParaChar 或者 "#"限定符
            </summary>
            <param name="paramName">参数名</param>
            <param name="paramValue">参数值</param>
            <param name="paramType">参数类型</param>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.CommandInfo.CommandType">
            <summary>
            获取命令类型
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.CommandInfo.CommandText">
            <summary>
            获取可以执行的SQL命令文本
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.CommandInfo.DataParameters">
            <summary>
            获取参数数组
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:PWMIS.DataMap.SqlMap.DBMapper">
            <summary>
            SQLMAP数据处理层基类
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.DBMapper.#ctor">
            <summary>
            初始化构造函数
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.DBMapper.CurrentDataBase">
            <summary>
            获取或设置当前使用的数据库操作对象
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.DBMapper.SqlMapFile">
            <summary>
            获取或设置SQL Map 配置文件地址(可以是一个外部配置文件或者嵌入程序集的配置文件)
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.DBMapper.Mapper">
            <summary>
            获取SQLMAP对象
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:PWMIS.DataMap.SqlMap.XmlCommand">
            <summary>
            SQL-MAP XML命令类
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.XmlCommand.#ctor(System.String,PWMIS.Common.DBMSType)">
            <summary>
            构造函数
            </summary>
            <param name="SqlTextPath">配置文件路径</param>
            <param name="ScriptType">数据类型</param>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.XmlCommand.GetCommand(System.String)">
            <summary>
            获取命令，通过命令名或者带命名组名称的命令名，获取命令信息
            </summary>
            <param name="CommandName"></param>
            <returns>命令文本</returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.XmlCommand.ScriptType">
            <summary>
            数据库脚本类型，符合 enumScriptType 的枚举类型
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.XmlCommand.CommandType">
            <summary>
            获取脚本的命令类型
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.XmlCommand.CommandClassName">
            <summary>
            获取脚本的命令组(class)名称
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.XmlCommand.CommandName">
            <summary>
            获取脚本的命令名称
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.XmlCommand.QueryType">
            <summary>
            获取脚本的查询类型，通常是 Select,Delete,Update 等
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.XmlCommand.ErrDescription">
            <summary>
            获取错误信息
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.XmlCommand.QueryString">
            <summary>
            获取命令表示的查询字符串，通常是一个带参数的命令文本或存储过程
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.XmlCommand.SqlTextPath">
            <summary>
            SQL脚本配置文件的路径
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:PWMIS.DataMap.SqlMap.SqlMapper">
            <summary>
            SQL-程序代码映射类
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.ParamsMap(System.Int32)">
            <summary>
            参数映射，用于表示参数对应的“属性类”
            </summary>
            <param name="index">元素索引</param>
            <value></value>
            <returns>参数结构</returns>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.GetScriptInfo(System.String)">
            <summary>
            解析SQL脚本信息，分析其中的参数数目，必须先在GetParameters 之前调用
            </summary>
            <param name="SqlMapScript">SQL脚本信息</param>
            <remarks>
            Dim SqlScript As String = "
            UPDATE EngineState SET 
            DoneLink=#DoneLink:String,String,10#,FoundLink=#FoundLink:String#,SiteCount=#SiteCount:String#,
            Formation=#Formation#,ReaderPoint=#ReaderPoint#,UseTime=#UseTime#,
            WHERE PlanID=#PlanID:Int32# "
            </remarks>
            <returns>解析后的原始SQL语句</returns>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.GetParameters(System.String)">
            <summary>
            根据SQL脚本，获取参数（带类型）列表
            </summary>
            <param name="SqlMapScript">SQL脚本</param>
            <returns>参数（带类型）列表</returns>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.Type2DbType(System.String)">
            <summary>
            系统类型到数据库类型转换
            </summary>
            <param name="strSystemType"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.GetDefaultSize(System.Data.DbType)">
            <summary>
            获取默认的数据类型长度
            </summary>
            <param name="dbType"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.GetCommandInfo(System.String)">
            <summary>
            获得配置命令信息
            </summary>
            <param name="XmlCommandName">配置文件中的命令名称</param>
            <returns>命令信息</returns>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.FindWords(System.String,System.Int32,System.Int32)">
            <summary>
            从输入字符串中寻找一个单词，忽略前面的空白字符，直到遇到单词之后第一个空白字符或者分割符或者标点符号为止。
            </summary>
            <param name="inputString">输入的字符串</param>
            <param name="startIndex">在输入字符串中要寻找单词的起始位置</param>
            <param name="maxLength">单词的最大长度，忽略超出部分</param>
            <returns>找到的新单词</returns>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.GetCommandInfoBySqlMapScript(System.String)">
            <summary>
            根据SQL-MAP脚本获取命令信息，注意不包含命令类型
            </summary>
            <param name="SqlMapScript">SQL-MAP脚本</param>
            <returns>命令信息</returns>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.ResultMapEntity(System.Data.IDataReader,PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            将DataReader中的结果数据映射到实体对象
            </summary>
            <param name="reader">数据阅读器</param>
            <param name="result">实体对象实例</param>
            <returns>填充后的实体对象</returns>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.ResultMapEntityList(System.Data.IDataReader,PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            将DataReader中的结果数据映射到实体对象集合，建议使用 EntityQuery泛型类来获取实体类集合
            </summary>
            <param name="reader">数据阅读器</param>
            <param name="result">实体对象实例</param>
            <returns>实体对象集合</returns>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.ParaChar">
            <summary>
            SQL变量前导字符
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.ResultClass">
            <summary>
            结果类型
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.EmbedAssemblySource">
            <summary>
            获取或者设置要嵌入编译的程序集名称，格式为 “程序集名称,默认命名空间.文件名.扩展名”
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.ResultMap">
            <summary>
            结果映射的实体类名称
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.ParamsScript">
            <summary>
            带参数描述信息的参数脚本数组
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.ParamsReplaceable">
            <summary>
            当前需要替换字符串的参数
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.DataBase">
            <summary>
            获取或者设置数据库访问对象
            </summary>
            <value>据库访问对象</value>
            <returns>据库访问对象</returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.CommandClassName">
            <summary>
            获取或设置配置文件中的命令组（类）名称
            </summary>
            <value>命令组（类）名称</value>
            <returns>命令组（类）名称</returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.ParasLenth">
            <summary>
            获取参数数目
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.DataBaseType">
            <summary>
            获取或者设置数据库类型
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.SqlMapFile">
            <summary>
            获取或设置SQL Map 配置文件地址
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.SqlMapScript">
            <summary>
            SQL-MAP 配置脚本文件内容
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:PWMIS.Common.SqlInfo">
            <summary>
            (与具体数据库无关的)SQL查询命令信息
            </summary>
        </member>
        <member name="M:PWMIS.Common.SqlInfo.GetFromCache(System.String)">
            <summary>
            从缓存中获取项
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.Common.SqlInfo.AddToCache(System.String,PWMIS.Common.SqlInfo)">
            <summary>
            增加一项到缓存中
            </summary>
            <param name="key"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:PWMIS.Common.SQLPage">
            <summary>
            SQL SERVER 分页处理，自动识别标准SQL语句并生成适合分页的SQL语句
            </summary>
        </member>
        <member name="M:PWMIS.Common.SQLPage.MakeSQLStringByPage(PWMIS.Common.DBMSType,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            生成SQL分页语句，记录总数为0表示生成统计语句
            </summary>
            <param name="dbmsType">数据库类型</param>
            <param name="strSQLInfo">原始SQL语句</param>
            <param name="strWhere">在分页前要替换的字符串，用于分页前的筛选</param>
            <param name="PageSize">页大小</param>
            <param name="PageNumber">页码</param>
            <param name="AllCount">记录总数，如果是0则生成统计记录数量的查询</param>
            <returns>生成SQL分页语句</returns>
        </member>
        <member name="M:PWMIS.Common.SQLPage.MakeSQLStringByPage(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            生成SQL分页语句，记录总数为0表示生成统计语句
            </summary>
            <param name="strSQLInfo">原始SQL语句</param>
            <param name="strWhere">在分页前要替换的字符串，用于分页前的筛选</param>
            <param name="PageSize">页大小</param>
            <param name="PageNumber">页码</param>
            <param name="AllCount">记录总数，如果是0则生成统计记录数量的查询</param>
            <returns>生成SQL分页语句</returns>
        </member>
        <member name="M:PWMIS.Common.SQLPage.MakePageSQLStringByMSSQL(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            MS SQLSERVER 分页SQL语句生成器，同样适用于ACCESS数据库
            </summary>
            <param name="strSQLInfo">原始SQL语句</param>
            <param name="strWhere">在分页前要替换的字符串，用于分页前的筛选</param>
            <param name="PageSize">页大小</param>
            <param name="PageNumber">页码</param>
            <param name="AllCount">记录总数</param>
            <returns>生成SQL分页语句</returns>
        </member>
        <member name="M:PWMIS.Common.SQLPage.MakePageSQLStringByOracle(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Oracle 分页SQL语句生成器
            </summary>
            <param name="strSQLInfo">原始SQL语句</param>
            <param name="strWhere">在分页前要替换的字符串，用于分页前的筛选</param>
            <param name="PageSize">页大小</param>
            <param name="PageNumber">页码</param>
            <param name="AllCount">记录总数</param>
            <returns>生成SQL分页语句</returns>
        </member>
        <member name="M:PWMIS.Common.SQLPage.GetDescPageSQLbyPrimaryKey(System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            根据主键的高效快速分页之倒序分页
            </summary>
            <param name="pageNum">页码，从1开始</param>
            <param name="pageSize">页大小，大于1</param>
            <param name="filedList">字段列表</param>
            <param name="tableName">表名称</param>
            <param name="PKName">主键名称</param>
            <param name="conditon">查询条件</param>
            <returns>返回指定页码的快速分页SQL语句</returns>
        </member>
        <member name="M:PWMIS.Common.SQLPage.GetAscPageSQLbyPrimaryKey(System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            根据主键的高效快速分页之 升序分页
            </summary>
            <param name="pageNum">页码，从1开始</param>
            <param name="pageSize">页大小，大于1</param>
            <param name="filedList">字段列表</param>
            <param name="tableName">表名称</param>
            <param name="PKName">主键名称</param>
            <param name="conditon">查询条件</param>
            <returns>返回指定页码的快速分页SQL语句</returns>
        </member>
    </members>
</doc>
