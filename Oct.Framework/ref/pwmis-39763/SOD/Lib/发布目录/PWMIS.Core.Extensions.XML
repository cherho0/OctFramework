<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PWMIS.Core.Extensions</name>
    </assembly>
    <members>
        <member name="T:PWMIS.Core.Extensions.DbContext">
            <summary>
            数据上下文，可以实现自动检查数据库，创建表，获取EntityQuery 泛型实例对象等功能，封装了AdoHelper的使用。
            </summary>
        </member>
        <member name="F:PWMIS.Core.Extensions.DbContext.DBFilePath">
            <summary>
            数据库文件，对于文件型数据库需要设置该字段，并且在CheckDB 实现类里面做适当的处理
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.#ctor(System.String)">
            <summary>
            初始化数据访问上下文
            </summary>
            <param name="connName">在应用程序配置文件的数据库连接配置的连接名称</param>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.CheckDB">
            <summary>
            检查数据库，检查表是否已经初始化。如果是Access 数据库，还会检查数据库文件是否存在，可以在系统中设置DBFilePath 字段。
            如果需要更多的检查，可以重写该方法，但一定请保留 base.CheckDB();这行代码。
            </summary>
            <returns>检查是否通过</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.CheckAllTableExists">
            <summary>
            检查所有的表是否存在，需要在子类里面实现。
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.CheckTableExists``1">
            <summary>
            检查实体类对应的数据表是否在数据库中存在，需要在子类中实现
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.NewQuery``1">
            <summary>
            创建一个新的EntityQuery泛型类实例对象
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.Tansaction``1(``0,System.Action{``0},System.String@)">
            <summary>
            开启事务执行上下文，程序会自动提交或者回滚事务。
            </summary>
            <typeparam name="T">数据上下文类型</typeparam>
            <param name="instance">实例对象</param>
            <param name="action">操作的方法</param>
            <param name="errorMessage">出错信息</param>
            <returns>事务是否执行成功。</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.Add``1(``0)">
            <summary>
            增加一个数据到数据库中
            </summary>
            <typeparam name="T">实体类或者接口</typeparam>
            <param name="data">要增加的数据</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.Update``1(``0)">
            <summary>
            修改一个数据到数据库中
            </summary>
            <typeparam name="T">实体类或者接口</typeparam>
            <param name="data">要修改的数据</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.Remove``1(``0)">
            <summary>
            从数据库中删除一个数据到，数据必须有主键
            </summary>
            <typeparam name="T">实体类或者接口</typeparam>
            <param name="data">要删除的数据</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.AddList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加一个列表数据到数据库中
            </summary>
            <typeparam name="T">实体类或者接口</typeparam>
            <param name="list">数据列表</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="P:PWMIS.Core.Extensions.DbContext.CurrentDataBase">
            <summary>
            关联的当期数据库访问对象
            </summary>
        </member>
        <member name="T:PWMIS.Core.Extensions.EntityBaseExtension">
            <summary>
            EntityBase 扩展，由网友“吉林-stdbool”提供
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.EntityBaseExtension.GetParentEntity``1(PWMIS.DataMap.Entity.EntityBase,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            通过子表实例获取所对应的父表实例 【**仅仅支持单一主键，不支持联合主键的情况**】
            </summary>
            <typeparam name="T">父表所对应的类</typeparam>
            <param name="entity"></param>
            <param name="db"></param>
            <returns>所对应的父表实例</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.EntityBaseExtension.GetParentEntity``1(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            通过子表实例获取所对应的父表实例 【**仅仅支持单一主键，不支持联合主键的情况**】
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.EntityBaseExtension.GetChildList``2(PWMIS.DataMap.Entity.EntityBase,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            通过 父表实例 查找 查询关联的特定子实体类集合 【参照“医生”的QueryListWithChild函数，不足：ParentType应该可以通过 entity获取。。。】
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ParentType"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:PWMIS.Core.Extensions.ModelCast">
             <summary>
             属性转换类，将一个类的属性值转换给另外一个类的同名属性，注意该类使用的是浅表复制。
             <example>
             <code>
             <![CDATA[
                    //下面几种用法一样:
                    ModelCast.GetCast(typeof(CarInfo), typeof(ImplCarInfo)).Cast(info, ic);
                    ModelCast.CastObject<CarInfo, ImplCarInfo>(info, ic);
                    ModelCast.CastObject(info, ic);
            
                    ImplCarInfo icResult= info.CopyTo<ImplCarInfo>(null);
            
                    ImplCarInfo icResult2 = new ImplCarInfo();
                    info.CopyTo《ImplCarInfo》(icResult2);
             ]]>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCast.GetCast(System.Type,System.Type)">
            <summary>
            获取要转换的当前转换类实例
            </summary>
            <param name="sourceType">要转换的源类型</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCast.#ctor(System.Type,System.Type)">
            <summary>
            以两个要转换的类型作为构造函数，构造一个对应的转换类
            </summary>
            <param name="sourceType"></param>
            <param name="targetType"></param>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCast.Cast(System.Object,System.Object)">
            <summary>
            将源类型的属性值转换给目标类型同名的属性
            </summary>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCast.Cast(System.Object,System.Object,System.String[])">
            <summary>
            将源类型的属性值转换给目标类型同名的属性，排除要过滤的属性名称
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="filter">要过滤的属性名称</param>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCast.CastObject``2(``0,``1)">
            <summary>
            转换对象
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TTarget">目标类型</typeparam>
            <param name="source">源对象</param>
            <param name="target">目标对象</param>
        </member>
        <member name="T:PWMIS.Core.Extensions.ModelCast.CastProperty">
            <summary>
            转换属性对象
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.ModelCast.CastProperty.SourceProperty">
            <summary>
            源属性
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.ModelCast.CastProperty.TargetProperty">
            <summary>
            目标属性
            </summary>
        </member>
        <member name="T:PWMIS.Core.Extensions.ModelCast.PropertyAccessorHandler">
            <summary>
            属性访问器
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCast.PropertyAccessorHandler.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            以一个属性对象初始化类
            </summary>
            <param name="propInfo">性对象</param>
        </member>
        <member name="P:PWMIS.Core.Extensions.ModelCast.PropertyAccessorHandler.PropertyName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.ModelCast.PropertyAccessorHandler.Getter">
            <summary>
            Get访问器
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.ModelCast.PropertyAccessorHandler.Setter">
            <summary>
            Set访问器
            </summary>
        </member>
        <member name="T:PWMIS.Core.Extensions.ModelCastExtension">
            <summary>
            对象转换扩展（可安全的处理PDF.NET实体类之间的转换）
            <example>
            <code>
            <![CDATA[
              A a = new A() {  Name="aaa", NoCopyName="no.no.no."};
              var b = a.CopyTo<B>(filter: new string[] { "NoCopyName" });
            ]]>
            </code>
            </example>
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCastExtension.CopyTo``1(System.Object,``0,System.String[])">
            <summary>
            将当前对象的属性值复制到目标对象，使用浅表复制
            </summary>
            <typeparam name="T">目标对象类型</typeparam>
            <param name="source">源对象</param>
            <param name="target">目标对象，如果为空，将生成一个</param>
            <param name="filter">要过滤的属性名称数组</param>
            <returns>复制过后的目标对象</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCastExtension.CopyTo``1(System.Object,``0)">
            <summary>
            拷贝当前对象的属性值到目标对象上
            </summary>
            <typeparam name="T">目标对象类型</typeparam>
            <param name="source">当前对象</param>
            <param name="target">目标对象</param>
            <returns>返回赋值过后的目标对象</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCastExtension.CopyTo``1(System.Object)">
            <summary>
            拷贝当前对象的属性值到目标对象上
            </summary>
            <typeparam name="T">目标对象类型</typeparam>
            <param name="source">当前对象</param>
            <returns>返回赋值过后的目标对象</returns>
        </member>
        <member name="T:PWMIS.Core.Extensions.OQLExtension">
            <summary>
            OQL扩展类
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.OQLExtension.ToList``1(PWMIS.DataMap.Entity.OQL)">
            <summary>
            OQL 扩展，可以直接返回查询的列表
            <example>
            <code>
            <![CDATA[
            
              User user=new User();
              OQL q=OQL.From(user).Select(user.ID,user.Name).End;
              List<User> list = q.ToList<User>();
            
            ]]>
            </code>
            </example>
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <param name="q">OQL对象</param>
            <returns>实体类列表</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.OQLExtension.ToList``1(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            OQL 扩展，可以直接返回查询的列表
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <param name="q">OQL对象</param>
            <param name="db">数据访问对象</param>
            <returns>实体类列表</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.OQLExtension.ToEntity``1(PWMIS.DataMap.Entity.OQL)">
            <summary>
            OQL 扩展，可以直接返回查询的实体类
            <example>
            <code>
            <![CDATA[
              User user=new User(){ID=100};
              OQL q=OQL.From(user).Select(user.ID,user.Name).Where(user.ID).End;
              User result = q.ToEntity<User>();
            ]]>
            </code>
            </example>
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <param name="q">OQL对象</param>
            <returns>实体类</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.OQLExtension.ToEntity``1(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
             OQL 扩展，可以直接返回查询的实体类
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <param name="q">OQL对象</param>
            <param name="db">数据访问对象</param>
            <returns>实体类</returns>
        </member>
        <!-- 对于成员“M:PWMIS.Core.Extensions.OQLExtension.ToObjectList``1(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper,PWMIS.DataMap.Entity.ECResultFunc{``0})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:PWMIS.Core.Extensions.OQLExtension.ToObjectList``1(PWMIS.DataMap.Entity.OQL,PWMIS.DataMap.Entity.ECResultFunc{``0})”忽略有格式错误的 XML 注释 -->
        <member name="M:PWMIS.Core.Extensions.OQLExtension.Execute(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            执行OQL
            </summary>
            <param name="oql">OQL</param>
            <param name="db">数据访问对象</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.OQLExtension.Execute(PWMIS.DataMap.Entity.OQL)">
            <summary>
            使用默认连接，执行OQL
            </summary>
            <param name="oql">OQL</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.OQLExtension.FilterEnumValues(System.Type,System.Int32)">
            <summary>
            过滤枚举中包含指定值的组合方式值，比如在OQL中比较，要求使用的枚举类型的值是2的次方
            感谢网友 深圳-Panke 2014.11.11 提供
            <example>
            <![CDATA[
            OQL q=OQL.From(paper)
                     .Where(cmp=>cmp.Compare(paper.Color,"in",typeof(Colors).FilterEnumValues((int)Colors.Blue) ))
               .END;
            ]]>
            </example>
            </summary>
            <param name="enumType"></param>
            <param name="FilterContainValue">要筛选的枚举值</param>
            <returns>返回所有可能的枚举值组合</returns>
        </member>
        <member name="T:PWMIS.Core.Extensions.SqlServerDbContext">
            <summary>
            SqlServer 数据上下文基类，可以自动创建实体类对应的表
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.SqlServerDbContext.#ctor(System.String)">
            <summary>
            用连接字符串名字初始化本类
            </summary>
            <param name="connName"></param>
        </member>
        <member name="M:PWMIS.Core.Extensions.SqlServerDbContext.CheckTableExists``1">
            <summary>
            检查实体类对应的数据表是否在数据库中存在
            </summary>
        </member>
    </members>
</doc>
